<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot开发实用篇</title>
      <link href="/posts/%20develop.html"/>
      <url>/posts/%20develop.html</url>
      
        <content type="html"><![CDATA[<h1>1. 前置知识</h1><h2 id="1-1-Linux（CenterOS7）">1.1 Linux（CenterOS7）</h2><ul><li>熟悉常用的Linux基础指令，熟悉Linux系统目录结构</li></ul><h2 id="1-2-实用开发技术">1.2 实用开发技术</h2><ul><li>缓存：Redis、MongoDB、……</li><li>消息中间件:RocketMq、RabbitMq、……</li><li>……</li></ul><h1>2. 热部署</h1><h2 id="2-1-手动启动热部署">2.1 手动启动热部署</h2><ul><li>启动热部署<ul><li>开启开发者工具<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072003582.png" alt=""></li><li>激活热部署：Ctrl + F9</li><li>关于热部署<ul><li>重启（Restart）：自定义开发代码，包含类、页面、配置文件等，加载位置restart类加载器</li><li>重载（ReLoad）：jar包，加载位置base类加载器</li></ul></li></ul></li><li>小结<br>①：开启开发者工具后启用热部署<br>②：使用构建项目操作启动热部署（Ctrl+F9）<br>③：热部署仅仅加载当前开发者自定义开发的资源，不加载jar资源</li></ul><h2 id="2-2-自动启动热部署">2.2 自动启动热部署</h2><ul><li>自动启动热部署<ul><li>设置自动构建项目<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072003035.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404071954449.png" alt=""></li><li>激活方式：Idea失去焦点5秒后启动热部署</li></ul></li><li>小结<br>①：设置自动构建用于自动热部署</li></ul><h2 id="2-3-热部署范围配置">2.3 热部署范围配置</h2><ul><li><p>热部署范围配置</p><ul><li><p>默认不触发重启的目录列表</p><ul><li>/META-INF/maven</li><li>/META-INF/resources</li><li>/resources</li><li>/static</li><li>/public</li><li>/templates</li></ul></li><li><p>自定义不参与重启排除项<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072004693.png" alt=""></p></li></ul></li><li><p>小结<br>①：自定义重启排除项</p></li><li><p>属性加载优先顺序</p><ul><li>参看<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</a><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072005909.png" alt=""></li></ul></li></ul><h2 id="2-4-关闭热部署">2.4 关闭热部署</h2><ul><li>禁用热部署<ul><li>设置高优先级属性禁用热部署<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072005186.png" alt=""></li></ul></li><li>小结<br>①：禁用热部署功能</li></ul><h1>3. 配置高级</h1><h2 id="3-1-ConfigurationProperties">3.1 @ConfigurationProperties</h2><ul><li><p>@ConfigurationProperties</p><ul><li>使用@ConfigurationProperties为第三方bean绑定属性</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Bean  </span><br><span class="line">@ConfigurationProperties(prefix = &quot;datasource&quot;)  </span><br><span class="line">public DruidDataSource dataSource()&#123;    </span><br><span class="line">DruidDataSource ds = new DruidDataSource();    </span><br><span class="line">return ds;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072006292.png" alt=""></p><ul><li>解除使用@ConfigurationProperties注释警告<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072006981.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072006652.png" alt=""></li></ul></li><li><p>@EnableConfigurationProperties</p><ul><li>@EnableConfigurationProperties注解可以将使用@ConfigurationProperties注解对应的类加入Spring容器</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication  </span><br><span class="line">@EnableConfigurationProperties(ServerConfig.class)  </span><br><span class="line">public class DemoApplication &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//@Component  </span><br><span class="line">@Data  </span><br><span class="line">@ConfigurationProperties(prefix = &quot;servers&quot;)  </span><br><span class="line">public class ServerConfig &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072009892.png" alt=""></p></li><li><p>小结<br>①：@ConfigurationProperties可以为第三方bean绑定属性</p></li></ul><h2 id="3-2-宽松绑定-松散绑定">3.2 宽松绑定/松散绑定</h2><ul><li>宽松绑定<ul><li>@ConfigurationProperties绑定属性支持属性名宽松绑定</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class ServerConfig &#123;    </span><br><span class="line">private String ipAddress;    </span><br><span class="line">private int port;    </span><br><span class="line">private long timeout;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>驼峰模式<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072009379.png" alt=""></li><li>下划线模式<br><strong><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072009923.png" alt=""></strong></li><li>中划线模式<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072009099.png" alt=""></li><li>常量模式<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072010627.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072010032.png" alt=""></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Bean  </span><br><span class="line">@ConfigurationProperties(prefix = &quot;datasource&quot;)  </span><br><span class="line">public DruidDataSource dataSource()&#123;    </span><br><span class="line">DruidDataSource ds = new DruidDataSource();    </span><br><span class="line">return ds;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072011268.png" alt=""></li><li>小结<br>①：@ConfigurationProperties绑定属性支持属性名宽松绑定<br>②：@Value注解不支持松散绑定<br>③：绑定前缀命名命名规则</li></ul><h2 id="3-3-常用计量单位绑定">3.3 常用计量单位绑定</h2><ul><li>常用计量单位<ul><li>SpringBoot支持JDK8提供的时间与空间计量单位</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">@Data  </span><br><span class="line">@ConfigurationProperties(prefix = &quot;servers&quot;)  </span><br><span class="line">public class ServerConfig &#123;    </span><br><span class="line">private String ipAddress;    </span><br><span class="line">private int port;    </span><br><span class="line">private long timeout;   </span><br><span class="line">@DurationUnit(ChronoUnit.MINUTES)    </span><br><span class="line">private Duration serverTimeOut;    </span><br><span class="line">@DataSizeUnit(DataUnit.MEGABYTES)    </span><br><span class="line">private DataSize dataSize;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JDK8支持的时间与空间计量单位<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072011500.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072011039.png" alt=""></li></ul></li><li>小结<br>①：常用的计量单位的使用</li></ul><h2 id="3-4-数据校验">3.4 数据校验</h2><ul><li><p>数据校验</p><ul><li>开启数据校验有助于系统安全性，J2EE规范中JSR303规范定义了一组有关数据校验相关的API</li></ul></li><li><p>开启Bean数据校验步骤<br>①：添加JSR303规范坐标与Hibernate校验框架对应坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072012024.png" alt=""><br>②：对Bean开启校验功能</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">@Data  </span><br><span class="line">@ConfigurationProperties(prefix = &quot;servers&quot;)  </span><br><span class="line">@Validated  </span><br><span class="line">public class ServerConfig &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③：设置校验规则</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">@Data  </span><br><span class="line">@ConfigurationProperties(prefix = &quot;servers&quot;)  </span><br><span class="line">@Validated  </span><br><span class="line">public class ServerConfig &#123;    </span><br><span class="line">@Max(value = 400,message = &quot;最大值不能超过400&quot;)    </span><br><span class="line">private int port;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：启用Bean属性校验</p><ul><li>导入JSR303与Hibernate校验框架坐标</li><li>使用@Validated注解启用校验功能</li><li>使用具体校验规则规范数据校验格式</li></ul></li><li><p>yaml语法规则</p><ul><li>字面值表达方式<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072012446.png" alt=""></li></ul></li><li><p>小结<br>①：注意yaml文件中对于数字的定义支持进制书写格式，如需使用字符串请使用引号明确标注</p></li></ul><h1>4. 测试</h1><h2 id="4-1-加载测试专用属性">4.1 加载测试专用属性</h2><ul><li>加载测试专用属性<ul><li>在启动测试环境时可以通过properties参数设置测试环境专用的属性</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest(properties = &#123;&quot;test.prop=testValue1&quot;&#125;)  </span><br><span class="line">public class PropertiesAndArgsTest &#123;  </span><br><span class="line">@Value(&quot;$&#123;test.prop&#125;&quot;)    </span><br><span class="line">private String msg;  </span><br><span class="line">@Test    </span><br><span class="line">void testProperties()&#123;        </span><br><span class="line">    System.out.println(msg);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优势：比多环境开发中的测试环境影响范围更小，仅对当前测试类有效</p></li><li><p>在启动测试环境时可以通过args参数设置测试环境专用的传入参数</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest(args = &#123;&quot;--test.arg=testValue2&quot;&#125;)  </span><br><span class="line">public class PropertiesAndArgsTest &#123;  </span><br><span class="line">@Value(&quot;$&#123;test.arg&#125;&quot;)    </span><br><span class="line">private String msg;  </span><br><span class="line">@Test    </span><br><span class="line">void testArgs()&#123;        </span><br><span class="line">    System.out.println(msg);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>小结<br>①：加载测试临时属性应用于小范围测试环境</li></ul><h2 id="4-2-加载测试专用配置">4.2 加载测试专用配置</h2><ul><li>加载测试专用配置<ul><li>使用@Import注解加载当前测试类专用的配置</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest  </span><br><span class="line">@Import(MsgConfig.class)  </span><br><span class="line">public class ConfigurationTest &#123;    </span><br><span class="line">@Autowired    </span><br><span class="line">private String msg;  </span><br><span class="line">@Test    </span><br><span class="line">void testConfiguration()&#123;       </span><br><span class="line">    System.out.println(msg);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>小结<br>①：加载测试范围配置应用于小范围测试环境</li></ul><h2 id="4-3-Web环境模拟测试">4.3 Web环境模拟测试</h2><ul><li><p>web环境模拟测试</p><ul><li>模拟端口</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)  </span><br><span class="line">public class WebTest &#123;  </span><br><span class="line">    @Test    </span><br><span class="line">    void testRandomPort () &#123;    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072013609.png" alt=""></p><ul><li>虚拟请求测试</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)  </span><br><span class="line">//开启虚拟MVC调用  </span><br><span class="line">@AutoConfigureMockMvc  </span><br><span class="line">public class WebTest &#123;  </span><br><span class="line">@Test    </span><br><span class="line">//注入虚拟MVC调用对象    </span><br><span class="line">public void testWeb(@Autowired MockMvc mvc) throws Exception &#123;  </span><br><span class="line">//创建虚拟请求，当前访问/books        </span><br><span class="line">MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get</span><br><span class="line">(&quot;/books&quot;);        </span><br><span class="line">//执行请求        </span><br><span class="line">ResultActions action = mvc.perform(builder);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>虚拟请求状态匹配</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void testSataus(@Autowired MockMvc mvc) throws Exception &#123;  </span><br><span class="line">MockHttpServletRequestBuilder builder = MockMvcRequestBuilders</span><br><span class="line">.get(&quot;/books&quot;);  </span><br><span class="line">ResultActions action = mvc.perform(builder);  </span><br><span class="line">//匹配执行状态（是否预期值）  </span><br><span class="line">//定义执行状态匹配器    </span><br><span class="line">StatusResultMatchers status = MockMvcResultMatchers.status();    </span><br><span class="line">//定义预期执行状态    </span><br><span class="line">ResultMatcher ok = status.isOk();    </span><br><span class="line">//使用本次真实执行结果与预期结果进行比对    </span><br><span class="line">action.andExpect(ok);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>虚拟请求响应体匹配</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void testBody(@Autowired MockMvc mvc) throws Exception &#123;  </span><br><span class="line">MockHttpServletRequestBuilder builder = MockMvcRequestBuilders</span><br><span class="line">.get(&quot;/books&quot;);</span><br><span class="line">ResultActions action = mvc.perform(builder);  </span><br><span class="line">//匹配执行结果（是否预期值）  </span><br><span class="line">//定义执行结果匹配器  </span><br><span class="line">ContentResultMatchers content = MockMvcResultMatchers.content();  </span><br><span class="line">//定义预期执行结果  </span><br><span class="line">ResultMatcher result = content().string(&quot;springboot&quot;);  </span><br><span class="line">//使用本次真实执行结果与预期结果进行比对  </span><br><span class="line">action.andExpect(result);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>虚拟请求响应体（json）匹配</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void testJson(@Autowired MockMvc mvc) throws Exception &#123;  </span><br><span class="line">MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get</span><br><span class="line">(&quot;/books&quot;);  </span><br><span class="line">ResultActions action = mvc.perform(builder);  </span><br><span class="line">//匹配执行结果（是否预期值）  </span><br><span class="line">//定义执行结果匹配器    </span><br><span class="line">ContentResultMatchers content = MockMvcResultMatchers.content();    </span><br><span class="line">//定义预期执行结果    </span><br><span class="line">ResultMatcher result = content.json(&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;SpringBoot2\</span><br><span class="line">&quot;&#125;&quot;);       </span><br><span class="line">//使用本次真实执行结果与预期结果进行比对    </span><br><span class="line">action.andExpect(result);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>虚拟请求响应头匹配</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void testContentType(@Autowired MockMvc mvc) throws Exception &#123;  </span><br><span class="line">MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get</span><br><span class="line">(&quot;/books&quot;);  </span><br><span class="line">ResultActions action = mvc.perform(builder);  </span><br><span class="line">HeaderResultMatchers header = MockMvcResultMatchers.header();  </span><br><span class="line">ResultMatcher resultHeader = header.string(&quot;Content-Type&quot;, </span><br><span class="line">&quot;application/json&quot;);    </span><br><span class="line">action.andExpect(resultHeader);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：web环境模拟测试</p><ul><li>设置测试端口</li><li>模拟测试启动</li><li>模拟测试匹配（各组成部分信息均可匹配）</li></ul></li></ul><h2 id="4-4-数据层测试回滚">4.4 数据层测试回滚</h2><ul><li>业务层测试事务回滚<ul><li>为测试用例添加事务，SpringBoot会对测试用例对应的事务提交操作进行回滚</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest  </span><br><span class="line">@Transactional  </span><br><span class="line">public class DaoTest &#123;    </span><br><span class="line">@Autowired    </span><br><span class="line">private BookService bookService;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果想在测试用例中提交事务，可以通过@Rollback注解设置</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest  </span><br><span class="line">@Transactional  </span><br><span class="line">@Rollback(false)  </span><br><span class="line">public class DaoTest &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>小结<br>①：测试用例回滚事务</li></ul><h2 id="4-5-测试用例数据设定">4.5 测试用例数据设定</h2><ul><li>测试用例数据设定<ul><li>测试用例数据通常采用随机值进行测试，使用SpringBoot提供的随机数为其赋值<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072013607.png" alt=""></li><li>${random.int}表示随机整数</li><li>${random.int(10)}表示10以内的随机数</li><li>${random.int(10,20)}表示10到20的随机数</li><li>其中()可以是任意字符，例如[]，!!均可</li></ul></li><li>小结<br>①：使用随机数据替换测试用例中书写固定的数据</li></ul><h1>5. 数据层解决方案</h1><ul><li><p>SQL</p></li><li><p>NoSQL</p></li><li><p>数据层解决方案</p><ul><li>现有数据层解决方案技术选型<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072014800.png" alt=""></li><li>数据源：DruidDataSource</li><li>持久化技术：MyBatis-Plus / MyBatis</li><li>数据库：MySQL</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072014123.png" alt=""></p><ul><li>内置持久化解决方案——JdbcTemplate</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest  </span><br><span class="line">class Springboot15SqlApplicationTests &#123;  </span><br><span class="line">@Autowired    </span><br><span class="line">private JdbcTemplate jdbcTemplate;  </span><br><span class="line">@Test    </span><br><span class="line">void testJdbc()&#123;        </span><br><span class="line">String sql = &quot;select * from tbl_book where id = 1&quot;;        </span><br><span class="line">List&lt;Book&gt; query = jdbcTemplate.query(sql, new RowMapper&lt;Book&gt;()</span><br><span class="line">&#123;            </span><br><span class="line">@Override            </span><br><span class="line">public Book mapRow(ResultSet rs, int rowNum) throws SQLException </span><br><span class="line">&#123;                </span><br><span class="line">    Book temp = new Book();</span><br><span class="line">    temp.setId(rs.getInt(&quot;id&quot;));</span><br><span class="line">    temp.setName(rs.getString(&quot;name&quot;));</span><br><span class="line">    temp.setType(rs.getString(&quot;type&quot;));</span><br><span class="line">    temp.setDescription(rs.getString</span><br><span class="line">    (&quot;description&quot;));                                      </span><br><span class="line">    return temp;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;);        </span><br><span class="line">System.out.println(query);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072015887.png" alt=""></p><ul><li><p>JdbcTemplate配置<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072016619.png" alt=""></p></li><li><p>小结<br>①：SpringBoot内置JdbcTemplate持久化解决方案<br>②：使用JdbcTemplate需要导入spring-boot-starter-jdbc</p></li><li><p>内嵌数据库</p><ul><li>SpringBoot提供了3种内嵌数据库供开发者选择，提高开发测试效率<ul><li>H2</li><li>HSQL</li><li>Derby</li></ul></li></ul></li><li><p>内嵌数据库（H2）</p><ul><li>导入H2相关坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072017502.png" alt=""></li><li>设置当前项目为web工程，并配置H2管理控制台参数<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072017399.png" alt=""></li><li>访问用户名sa，默认密码123456</li><li>操作数据库（创建表）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072017896.png" alt=""></li><li>设置访问数据源<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072018370.png" alt=""></li><li>H2数据库控制台仅用于开发阶段，线上项目请务必关闭控制台功能<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072018088.png" alt=""></li></ul></li><li><p>数据库设定</p><ul><li>SpringBoot可以根据url地址自动识别数据库种类，在保障驱动类存在的情况下，可以省略配置<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072019743.png" alt=""></li></ul></li><li><p>小结<br>①：H2内嵌式数据库启动方式<br>②：H2数据库线上运行时请务必关闭</p></li></ul></li><li><p>数据源配置格式</p><ul><li>格式一<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072014787.png" alt=""></li><li>格式二<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072019821.png" alt=""></li></ul></li><li><p>数据源配置</p><ul><li>SpringBoot提供了3种内嵌的数据源对象供开发者选择<ul><li>HikariCP：默认内置数据源对象</li><li>Tomcat提供DataSource：HikariCP不可用的情况下，且在web环境中，将使用tomcat服务器配置的数据源对象</li><li>Commons DBCP：Hikari不可用，tomcat数据源也不可用，将使用dbcp数据源</li></ul></li><li>通用配置无法设置具体的数据源配置信息，仅提供基本的连接相关配置，如需配置，在下一级配置中设置具体设定<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072020763.png" alt=""></li></ul></li><li><p>小结<br>①：SpringBoot内置3款数据源可供选择</p><ul><li>HikariCP（默认）</li><li>Tomcat提供DataSource</li><li>Commons DBCP</li></ul></li><li><p>市面上常见的NoSQL解决方案</p><ul><li>Redis</li><li>Mongo</li><li>ES</li><li>Solr</li></ul></li><li><p>说明：上述技术通常在Linux系统中安装部署，为降低学习者压力，本课程制作基于Windows版安装所有的软件并基于Windows版安装的软件进行课程制作</p></li><li><p>Redis</p><ul><li><p>Redis是一款key-value存储结构的内存级NoSQL数据库</p><ul><li>支持多种数据存储格式</li><li>支持持久化</li><li>支持集群</li></ul></li><li><p>Redis下载（ Windows版）</p><ul><li><code>https://github.com/tporadowski/redis/releases</code></li></ul></li><li><p>Redis安装与启动（ Windows版）</p><ul><li>Windows解压安装或一键式安装</li><li>服务端启动命令<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072020794.png" alt=""></li><li>客户端启动命令<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072020857.png" alt=""></li></ul></li><li><p>小结<br>①：Redis安装（Windows版）<br>②：Redis基本操作</p></li><li><p>导入SpringBoot整合Redis坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072020051.png" alt=""></p></li><li><p>配置Redis（采用默认配置）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072021433.png" alt=""></p></li><li><p>主机：localhost（默认）</p></li><li><p>端口：6379（默认）</p></li><li><p>RedisTemplate提供操作各种数据存储类型的接口API<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072021008.png" alt=""></p></li><li><p>客户端：RedisTemplate</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest  </span><br><span class="line">class Springboot16NosqlApplicationTests &#123;    </span><br><span class="line">@Test    </span><br><span class="line">void set(@Autowired RedisTemplate redisTemplate) &#123;        </span><br><span class="line">ValueOperations ops = redisTemplate.opsForValue();</span><br><span class="line">ops.set(&quot;testKey&quot;,&quot;testValue&quot;);          </span><br><span class="line">&#125;    </span><br><span class="line">@Test    </span><br><span class="line">void get(@Autowired RedisTemplate redisTemplate) &#123;        </span><br><span class="line">ValueOperations ops = redisTemplate.opsForValue();        </span><br><span class="line">Object val = ops.get(&quot;testKey&quot;);        </span><br><span class="line">System.out.println(val);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest  </span><br><span class="line">class Springboot16NosqlApplicationTests &#123;  </span><br><span class="line">@Test    </span><br><span class="line">void set(@Autowired RedisTemplate redisTemplate) &#123;  </span><br><span class="line">HashOperations opsH = redisTemplate.opsForHash();        </span><br><span class="line">opsH.put(&quot;testKeyH&quot;,&quot;testFieldH&quot;,&quot;testValueH&quot;);  </span><br><span class="line">&#125;    </span><br><span class="line">@Test    </span><br><span class="line">void get(@Autowired RedisTemplate redisTemplate) &#123;  </span><br><span class="line">HashOperations opsH = redisTemplate.opsForHash();  </span><br><span class="line">Object valH = opsH.get(&quot;testKeyH&quot;, &quot;testFieldH&quot;);        </span><br><span class="line">System.out.println(valH);    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：SpringBoot整合Redis</p><ul><li>导入redis对应的starter</li><li>配置</li><li>提供操作Redis接口对象RedisTemplate<ul><li>ops*：获取各种数据类型操作接口</li></ul></li></ul></li><li><p>客户端：RedisTemplate以对象作为key和value，内部对数据进行序列化</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest  </span><br><span class="line">class Springboot16NosqlApplicationTests &#123;  </span><br><span class="line">@Test    </span><br><span class="line">void set(@Autowired RedisTemplate redisTemplate) &#123;        </span><br><span class="line">ValueOperations ops = redisTemplate.opsForValue();        </span><br><span class="line">ops.set(&quot;testKey&quot;,&quot;testValue&quot;);  </span><br><span class="line">&#125;    </span><br><span class="line">@Test    </span><br><span class="line">void get(@Autowired RedisTemplate redisTemplate) &#123;        </span><br><span class="line">ValueOperations ops = redisTemplate.opsForValue();        </span><br><span class="line">Object val = ops.get(&quot;testKey&quot;);        </span><br><span class="line">System.out.println(val);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户端：StringRedisTemplate以字符串作为key和value，与Redis客户端操作等效</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest  </span><br><span class="line">class Springboot16NosqlApplicationTests &#123;  </span><br><span class="line">@Test    </span><br><span class="line">void set(@Autowired StringRedisTemplate redisTemplate) &#123;        </span><br><span class="line">ValueOperations ops = redisTemplate.opsForValue();        </span><br><span class="line">ops.set(&quot;testKey&quot;,&quot;testValue&quot;);  </span><br><span class="line">&#125;    </span><br><span class="line">@Test    </span><br><span class="line">void get(@Autowired StringRedisTemplate redisTemplate) &#123;        </span><br><span class="line">ValueOperations ops = redisTemplate.opsForValue();        </span><br><span class="line">Object val = ops.get(&quot;testKey&quot;);        </span><br><span class="line">System.out.println(val);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：RedisTemplate<br>②：StringRedisTemplate（常用）</p></li><li><p>客户端选择：jedis<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072022019.png" alt=""></p></li><li><p>配置客户端<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072022264.png" alt=""></p></li><li><p>配置客户端专用属性<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072022672.png" alt=""></p></li><li><p>lettcus与jedis区别</p><ul><li>jedis连接Redis服务器是直连模式，当多线程模式下使用jedis会存在线程安全问题，解决方案可以通过配置连接池使每个连接专用，这样整体性能就大受影响。</li><li>lettcus基于Netty框架进行与Redis服务器连接，底层设计中采用StatefulRedisConnection。 StatefulRedisConnection自身是线程安全的，可以保障并发访问安全问题，所以一个连接可以被多线程复用。当然lettcus也支持多连接实例一起工作。</li></ul></li><li><p>小结<br>①：SpringBoot整合Redis客户端选择</p><ul><li>lettuce（默认）</li><li>jedis</li></ul></li></ul></li><li><p>Mongodb</p><ul><li><p>MongoDB是一个开源、高性能、无模式的文档型数据库。NoSQL数据库产品中的一种，是最像关系型数据库的非关系型数据库</p></li><li><p>淘宝用户数据</p><ul><li>存储位置：数据库</li><li>特征：永久性存储，修改频度极低</li></ul></li><li><p>游戏装备数据、游戏道具数据<br> - 存储位置：数据库、Mongodb<br> - 特征：永久性存储与临时存储相结合、修改频度较高</p></li><li><p>直播数据、打赏数据、粉丝数据</p><ul><li>存储位置：数据库、Mongodb</li><li>特征：永久性存储与临时存储相结合，修改频度极高</li></ul></li><li><p>物联网数据</p><ul><li>存储位置：Mongodb</li><li>特征：临时存储，修改频度飞速</li></ul></li><li><p>其他数据……</p></li><li><p>小结<br>①：Mongodb应用场景</p></li><li><p>Windows版Mongo下载</p><ul><li><a href="https://www.mongodb.com/try/download">https://www.mongodb.com/try/download</a></li></ul></li><li><p>Windows版Mongo安装</p><ul><li>解压缩后设置数据目录</li></ul></li><li><p>Windows版Mongo启动</p><ul><li>服务端启动<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072023431.png" alt=""></li><li>客户端启动<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072023563.png" alt=""></li></ul></li><li><p>Windows版Mongo安装问题及解决方案<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072023901.png" alt=""></p><ul><li>步骤一：下载对应的dll文件（通过互联网搜索即可）</li><li>步骤二：拷贝到windows安装路径下的system32目录中</li><li>步骤三：执行命令注册对应dll文件<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072024684.png" alt=""></li></ul></li><li><p>可视化客户端——Robo 3T<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072026872.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072026577.png" alt=""></p></li><li><p>小结<br>①：Mongodb安装、启动<br>②：可视化客户端Robo 3T安装与连接</p></li><li><p>新增<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072026928.png" alt=""></p></li><li><p>修改<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072026101.png" alt=""></p></li><li><p>删除<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072026211.png" alt=""></p></li><li><p>基础查询</p><ul><li>查询全部：db.集合.find();</li><li>查第一条：db.集合.findOne()</li><li>查询指定数量文档：db.集合.find().limit(10)    //查10条文档</li><li>跳过指定数量文档：db.集合.find().skip(20)    //跳过20条文档</li><li>统计：db.集合.count()</li><li>排序：db.集合.sort({age:1})    //按age升序排序</li><li>投影：db.集合名称.find(条件,{name:1,age:1})    //仅保留name与age域</li></ul></li><li><p>条件查询</p><ul><li>基本格式：db.集合.find({条件})</li><li>模糊查询：db.集合.find({域名:/正则表达式/})    //等同SQL中的like，比like强大，可以执行正则所有规则</li><li>条件比较运算：db.集合.find({域名:{$gt:值}})    //等同SQL中的数值比较操作，例如：name&gt;18</li><li>包含查询：db.集合.find({域名:{$in:[值1，值2]}})    //等同于SQL中的in</li><li>条件连接查询：db.集合.find({$and:[{条件1},{条件2}]})  //等同于SQL中的and、or</li></ul></li><li><p>小结<br>①：Mongodb基础CRUD</p></li><li><p>导入Mongodb驱动<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072028001.png" alt=""></p></li><li><p>配置客户端<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072028314.png" alt=""></p></li><li><p>客户端读写Mongodb</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">void testSave(@Autowired MongoTemplate mongoTemplate)&#123;    </span><br><span class="line">Book book = new Book();    </span><br><span class="line">book.setId(1);    </span><br><span class="line">book.setType(&quot;springboot&quot;);    </span><br><span class="line">book.setName(&quot;springboot&quot;);    </span><br><span class="line">book.setDescription(&quot;springboot&quot;);  </span><br><span class="line">    mongoTemplate.save(book);  </span><br><span class="line">&#125;  </span><br><span class="line">@Test  </span><br><span class="line">void testFind(@Autowired MongoTemplate mongoTemplate)&#123;    </span><br><span class="line">List&lt;Book&gt; all = mongoTemplate.findAll(Book.class);    </span><br><span class="line">System.out.println(all);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小结<br>①：1.SpringBoot整合Mongodb<ul><li>导入Mongodb对应的starter</li><li>配置mongodb访问uri</li><li>提供操作Mongodb接口对象MongoTemplate</li></ul></li></ul></li><li><p>ElasticSearch（ES）</p><ul><li><p>Elasticsearch是一个分布式全文搜索引擎<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072028231.png" alt=""></p></li><li><p>小结<br>①：ES应用场景<br>②：ES相关概念</p></li><li><p>Windows版ES下载</p><ul><li><a href="https://www.elastic.co/cn/downloads/elasticsearch">(https://www.elastic.co/cn/downloads/elasticsearch)</a></li></ul></li><li><p>Windows版ES安装与启动<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072029913.png" alt=""></p></li><li><p>小结<br>①：ES下载与安装</p></li><li><p>创建/查询/删除索引<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072029710.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072029055.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072029960.png" alt=""></p></li><li><p>IK分词器</p><ul><li>下载：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></li></ul></li><li><p>创建索引并指定规则<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072030147.png" alt=""></p></li><li><p>小结<br>①：索引操作<br>②：IK分词器安装<br>③：设置索引创建规则（应用）</p></li><li><p>创建文档<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072030789.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072030963.png" alt=""></p></li><li><p>查询文档<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072031982.png" alt=""></p></li><li><p>条件查询<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072031975.png" alt=""></p></li><li><p>删除文档<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072031591.png" alt=""></p></li><li><p>修改文档（全量修改）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072031380.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072032459.png" alt=""></p></li><li><p>修改文档（部分修改）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072032445.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072033130.png" alt=""></p></li><li><p>小结<br>①：文档操作</p><ul><li>增删改查</li></ul></li><li><p>导入坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072033704.png" alt=""></p></li><li><p>配置<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072033915.png" alt=""></p></li><li><p>客户端</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest  </span><br><span class="line">class Springboot18EsApplicationTests &#123;  </span><br><span class="line">    @Autowired    </span><br><span class="line">    private ElasticsearchRestTemplate template;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SpringBoot平台并没有跟随ES的更新速度进行同步更新，ES提供了High Level Client操作ES</li><li>导入坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072034247.png" alt=""></li><li>配置（无）</li><li>客户端</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">void test() throws IOException &#123;    </span><br><span class="line">HttpHost host = HttpHost.create(&quot;http://localhost:9200&quot;);    </span><br><span class="line">RestClientBuilder builder = RestClient.builder(host);    </span><br><span class="line">RestHighLevelClient client = new RestHighLevelClient(builder);    </span><br><span class="line">//客户端操作    </span><br><span class="line">CreateIndexRequest request = new CreateIndexRequest(&quot;books&quot;);    </span><br><span class="line">//获取操作索引的客户端对象，调用创建索引操作    </span><br><span class="line">client.indices().create(request, RequestOptions.DEFAULT);    </span><br><span class="line">//关闭客户端    </span><br><span class="line">client.close();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户端改进</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest  </span><br><span class="line">class Springboot18EsApplicationTests &#123;    </span><br><span class="line">@Autowired    </span><br><span class="line">private BookDao bookDao;  </span><br><span class="line">@Autowired    </span><br><span class="line">RestHighLevelClient client;  </span><br><span class="line">@BeforeEach    </span><br><span class="line">void setUp() &#123;  </span><br><span class="line">this.client = new RestHighLevelClient(RestClient.builder</span><br><span class="line">(HttpHost.create(&quot;http://localhost:9200&quot;)));  </span><br><span class="line">&#125;    </span><br><span class="line">    </span><br><span class="line">@AfterEach    </span><br><span class="line">void tearDown() throws IOException &#123;  </span><br><span class="line">this.client.close();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">void test() throws IOException &#123;    </span><br><span class="line">//客户端操作    </span><br><span class="line">CreateIndexRequest request = new CreateIndexRequest(&quot;books&quot;);    </span><br><span class="line">//获取操作索引的客户端对象，调用创建索引操作    </span><br><span class="line">client.indices().create(request, RequestOptions.DEFAULT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：High Leven Client<br>②：客户端初始化<br>③：客户端改进</p></li><li><p>创建索引</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//创建索引  </span><br><span class="line">@Test  </span><br><span class="line">void testCreateIndexByIK() throws IOException &#123;    </span><br><span class="line">HttpHost host = HttpHost.create(&quot;http://localhost:9200&quot;);    </span><br><span class="line">RestClientBuilder builder = RestClient.builder(host);    </span><br><span class="line">RestHighLevelClient client = new RestHighLevelClient(builder);    </span><br><span class="line">//客户端操作    </span><br><span class="line">CreateIndexRequest request = new CreateIndexRequest(&quot;books&quot;);    </span><br><span class="line">//设置要执行操作  </span><br><span class="line">String json = &quot;&quot;;    </span><br><span class="line">//设置请求参数，参数类型json数据    </span><br><span class="line">request.source(json,XContentType.JSON);    </span><br><span class="line">//获取操作索引的客户端对象，调用创建索引操作    </span><br><span class="line">client.indices().create(request, RequestOptions.DEFAULT);    </span><br><span class="line">//关闭客户端    </span><br><span class="line">client.close();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072034749.png" alt=""></p><ul><li>添加文档</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//添加文档  </span><br><span class="line">@Test  </span><br><span class="line">void testCreateDoc() throws IOException &#123;    </span><br><span class="line">Book book = bookDao.selectById(1);    </span><br><span class="line">IndexRequest request = new IndexRequest(&quot;books&quot;).id(book.getId().</span><br><span class="line">toString());    </span><br><span class="line">String json = JSON.toJSONString(book);    </span><br><span class="line">request.source(json,XContentType.JSON);    </span><br><span class="line">client.index(request, RequestOptions.DEFAULT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>批量添加文档</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//批量添加文档  </span><br><span class="line">@Test  </span><br><span class="line">void testCreateDocAll() throws IOException &#123;    </span><br><span class="line">List&lt;Book&gt; bookList = bookDao.selectList(null);    </span><br><span class="line">BulkRequest bulk = new BulkRequest();    </span><br><span class="line">for (Book book : bookList) &#123;        </span><br><span class="line">IndexRequest request = new IndexRequest(&quot;books&quot;).id(book.getId().</span><br><span class="line">toString());        </span><br><span class="line">String json = JSON.toJSONString(book);        </span><br><span class="line">request.source(json,XContentType.JSON);        </span><br><span class="line">bulk.add(request);  </span><br><span class="line">&#125;    </span><br><span class="line">client.bulk(bulk,RequestOptions.DEFAULT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：创建索引<br>②：添加文档<br>③：批量添加文档</p></li><li><p>按id查询文档</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">void testGet() throws IOException &#123;    </span><br><span class="line">GetRequest request = new GetRequest(&quot;books&quot;,&quot;1&quot;);    </span><br><span class="line">GetResponse response = client.get(request, RequestOptions.DEFAULT);    </span><br><span class="line">String json = response.getSourceAsString();    </span><br><span class="line">System.out.println(json);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>按条件查询文档</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">void testSearch() throws IOException &#123;    </span><br><span class="line">SearchRequest request = new SearchRequest(&quot;books&quot;);    </span><br><span class="line">SearchSourceBuilder builder = new SearchSourceBuilder();    </span><br><span class="line">builder.query(QueryBuilders.termQuery(&quot;all&quot;,“java&quot;));    </span><br><span class="line">request.source(builder);    </span><br><span class="line">SearchResponse response = client.search(request, </span><br><span class="line">RequestOptions.DEFAULT);    </span><br><span class="line">SearchHits hits = response.getHits();    </span><br><span class="line">for (SearchHit hit : hits) &#123;        </span><br><span class="line">String source = hit.getSourceAsString();        </span><br><span class="line">Book book = JSON.parseObject(source, Book.class);        </span><br><span class="line">System.out.println(book);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小结<br>①：根据id查询文档<br>②：根据条件查询文档</li></ul></li></ul><h1>6. 整合第三方技术</h1><h2 id="6-1-缓存">6.1 缓存</h2><ul><li>缓存<ul><li><p>缓存是一种介于数据永久存储介质与数据应用之间的数据临时存储介质<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072035156.png" alt=""></p></li><li><p>缓存是一种介于数据永久存储介质与数据应用之间的数据临时存储介质</p></li><li><p>使用缓存可以有效的减少低速数据读取过程的次数（例如磁盘IO），提高系统性能</p></li><li><p>缓存不仅可以用于提高永久性存储介质的数据读取效率，还可以提供临时的数据存储空间<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072035211.png" alt=""></p></li><li><p>小结<br>①：缓存作用<br>②：自定义缓存</p></li><li><p>SpringBoot提供了缓存技术，方便缓存使用</p></li><li><p>缓存使用</p><ul><li><p>启用缓存</p></li><li><p>设置进入缓存的数据</p></li><li><p>设置读取缓存的数据</p></li><li><p>导入缓存技术对应的starter<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072035054.png" alt=""></p></li><li><p>启用缓存</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication  </span><br><span class="line">@EnableCaching  </span><br><span class="line">public class Springboot19CacheApplication &#123;   </span><br><span class="line">public static void main(String[] args) &#123; </span><br><span class="line">SpringApplication.run(Springboot19CacheApplication.class, </span><br><span class="line">args);    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置当前操作的结果数据进入缓存</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable(value=&quot;cacheSpace&quot;,key=&quot;#id&quot;)  </span><br><span class="line">public Book getById(Integer id) &#123;    </span><br><span class="line">return bookDao.selectById(id);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：SpringBoot启用缓存的方式</p><ul><li>@EnableCaching</li><li>@Cacheable</li></ul></li><li><p>SpringBoot提供的缓存技术除了提供默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存技术的开发与管理</p></li><li><p>SpringBoot提供的缓存技术除了提供默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存技术的开发与管理</p><ul><li>Generic</li><li>JCache</li><li><code>Ehcache</code></li><li>Hazelcast</li><li>Infinispan</li><li>Couchbase</li><li><code>Redis</code></li><li>Caffeine</li><li>Simple（默认）</li><li><code>memcached</code></li><li>jetcache（阿里）</li></ul></li><li><p>缓存使用案例——手机验证码</p><ul><li><p>需求</p><ul><li>输入手机号获取验证码，组织文档以短信形式发送给用户（页面模拟）</li><li>输入手机号和验证码验证结果</li></ul></li><li><p>需求分析</p><ul><li>提供controller，传入手机号，业务层通过手机号计算出独有的6位验证码数据，存入缓存后返回此数据</li><li>提供controller，传入手机号与验证码，业务层通过手机号从缓存中读取验证码与输入验证码进行比对，返回比对结果</li></ul></li><li><p>开启缓存</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication  </span><br><span class="line">@EnableCaching  </span><br><span class="line">public class Springboot19CacheApplication &#123;    </span><br><span class="line">public static void main(String[] args) &#123;   </span><br><span class="line">SpringApplication.run(Springboot19CacheApplication.class, </span><br><span class="line">args);    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务层接口</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public interface SMSCodeService &#123;    </span><br><span class="line">/**  </span><br><span class="line">* 传入手机号获取验证码，存入缓存  </span><br><span class="line">* @param tele     </span><br><span class="line">* @return  </span><br><span class="line">*/    </span><br><span class="line">String sendCodeToSMS(String tele);</span><br><span class="line"></span><br><span class="line">/**  </span><br><span class="line">* 传入手机号与验证码，校验匹配是否成功  </span><br><span class="line">* @param smsCode     </span><br><span class="line">* @return  </span><br><span class="line">*/    </span><br><span class="line">boolean checkCode(SMSCode smsCode);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务层设置获取验证码操作，并存储缓存，手机号为key，验证码为value</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Autowired  </span><br><span class="line">private CodeUtils codeUtils;  </span><br><span class="line">@CachePut(value = &quot;smsCode&quot;,key=&quot;#tele&quot;)  </span><br><span class="line">public String sendCodeToSMS(String tele) &#123;    </span><br><span class="line">String code = codeUtils.generator(tele);    </span><br><span class="line">return code;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务层设置校验验证码操作，校验码通过缓存读取，返回校验结果</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Autowired  </span><br><span class="line">private CodeUtils codeUtils;  </span><br><span class="line">public boolean checkCode(SMSCode smsCode) &#123;    </span><br><span class="line">//取出内存中的验证码与传递过来的验证码比对，如果相同，返回true    </span><br><span class="line">String code = smsCode.getCode();    </span><br><span class="line">String cacheCode = codeUtils.get(smsCode.getTele());    </span><br><span class="line">return code.equals(cacheCode);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class CodeUtils &#123;    </span><br><span class="line">@Cacheable(value = &quot;smsCode&quot;,key=&quot;#tele&quot;)    </span><br><span class="line">public String get(String tele)&#123;        </span><br><span class="line">return null;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：手机验证码案例实现</p></li><li><p>缓存供应商变更：Ehcache</p><ul><li>加入Ehcache坐标（缓存供应商实现）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072036372.png" alt=""></li><li>缓存设定为使用Ehcache<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072036002.png" alt=""></li><li>提供ehcache配置文件ehcache.xml<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072036405.png" alt=""></li><li>提供ehcache配置文件ehcache.xml<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072036359.png" alt=""></li></ul></li><li><p>小结<br>①：变更缓存供应商为Ehcache</p></li><li><p>缓存供应商变更：Redis</p><ul><li>加入Redis坐标（缓存供应商实现）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072037856.png" alt=""></li><li>配置Redis服务器，缓存设定为使用Redis<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072037291.png" alt=""></li><li>设置Redis相关配置<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072037548.png" alt=""></li></ul></li><li><p>小结<br>①：变更缓存供应商为Redis</p></li><li><p>缓存供应商变更:memcached</p><ul><li><p>下载memcached</p><ul><li>地址：<a href="https://www.runoob.com/memcached/window-install-memcached.html">https://www.runoob.com/memcached/window-install-memcached.html</a></li></ul></li><li><p>安装memcached</p><ul><li>使用管理员身份运行cmd指令</li><li>安装<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072038086.png" alt=""></li></ul></li><li><p>运行memcached</p><ul><li>启动服务<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072038087.png" alt=""></li><li>停止服务<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072038088.png" alt=""></li></ul></li><li><p>小结<br>①：memcached下载与安装<br>②：memcached启动与退出</p></li><li><p>memcached客户端选择</p><ul><li>Memcached Client for Java：最早期客户端，稳定可靠，用户群广</li><li>SpyMemcached：效率更高</li><li>Xmemcached：并发处理更好</li></ul></li><li><p>SpringBoot未提供对memcached的整合，需要使用硬编码方式实现客户端初始化管理</p></li><li><p>加入Xmemcache坐标（缓存供应商实现）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072039616.png" alt=""></p></li><li><p>配置memcached服务器必要属性<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072039211.png" alt=""></p></li><li><p>创建读取属性配置信息类，加载配置</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">@ConfigurationProperties(prefix = &quot;memcached&quot;)  </span><br><span class="line">@Data  </span><br><span class="line">public class XMemcachedProperties &#123;    </span><br><span class="line">private String servers;    </span><br><span class="line">private Integer poolSize;    </span><br><span class="line">private Long opTimeout;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建客户端配置类</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">public class XMemcachedConfig &#123;    </span><br><span class="line">@Autowired    </span><br><span class="line">private XMemcachedProperties xMemcachedProperties;  </span><br><span class="line">@Bean    </span><br><span class="line">public MemcachedClient getMemcachedClinet() throws </span><br><span class="line">IOException &#123;        </span><br><span class="line">MemcachedClientBuilder builder = new XMemcachedClientBuilder</span><br><span class="line">(xMemcachedProperties.getServers());  </span><br><span class="line">MemcachedClient memcachedClient = builder.build();        </span><br><span class="line">return memcachedClient;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置memcached属性</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class SMSCodeServiceMemcacheImpl implements SMSCodeService &#123;    </span><br><span class="line">@Autowired    </span><br><span class="line">private CodeUtils codeUtils;  </span><br><span class="line">@Autowired    </span><br><span class="line">private MemcachedClient memcachedClient;  </span><br><span class="line">@Override    </span><br><span class="line">public String sendCodeToSMS(String tele) &#123;        </span><br><span class="line">String code = this.codeUtils.generator(tele);        </span><br><span class="line">//将数据加入memcache        </span><br><span class="line">try &#123;            </span><br><span class="line">    memcachedClient.set(tele,0,code);  // key,timeout,value        </span><br><span class="line">&#125; catch (Exception e) &#123;  </span><br><span class="line">e.printStackTrace();        </span><br><span class="line">&#125;        </span><br><span class="line">return code;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class SMSCodeServiceMemcacheImpl implements SMSCodeService &#123;    </span><br><span class="line">@Autowired    </span><br><span class="line">private CodeUtils codeUtils;  </span><br><span class="line">@Autowired    </span><br><span class="line">private MemcachedClient memcachedClient;  </span><br><span class="line">@Override    </span><br><span class="line">public boolean checkCode(CodeMsg codeMsg) &#123;        </span><br><span class="line">String value = null;        </span><br><span class="line">try &#123;  </span><br><span class="line">value = memcachedClient.get(codeMsg.getTele()).toString();  </span><br><span class="line">&#125; catch (Exception e) &#123;  </span><br><span class="line">e.printStackTrace();  </span><br><span class="line">&#125;  </span><br><span class="line">return codeMsg.getCode().equals(value);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小结<br>①：xmemcached客户端加载方式（bean初始化）<br>②：xmemcached客户端使用方式（set &amp; get）</li></ul></li><li><p>缓存供应商变更:jetcache</p><ul><li><p>jetCache对SpringCache进行了封装，在原有功能基础上实现了多级缓存、缓存统计、自动刷新、异步调用、数据报表等功能</p></li><li><p>jetCache设定了本地缓存与远程缓存的多级缓存解决方案</p><ul><li>本地缓存（local）<ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li>远程缓存（remote）<ul><li>Redis</li><li>Tair</li></ul></li></ul></li><li><p>加入jetcache坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072040965.png" alt=""></p></li><li><p>配置<code>远程</code>缓存必要属性<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072040966.png" alt=""></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072040967.png" alt=""></p><ul><li>配置<code>本地</code>缓存必要属性<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072040968.png" alt=""></li><li>配置范例<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072041704.png" alt=""></li><li>配置属性说明<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072041728.png" alt=""></li><li>开启jetcache注解支持</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication  </span><br><span class="line">@EnableCreateCacheAnnotation  </span><br><span class="line">public class Springboot19CacheApplication &#123;    </span><br><span class="line">public static void main(String[] args) &#123;        </span><br><span class="line">SpringApplication.run(Springboot19CacheApplication.class, </span><br><span class="line">args);    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明缓存对象</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class SMSCodeServiceImpl implements SMSCodeService &#123;</span><br><span class="line">@Autowired    </span><br><span class="line">private CodeUtils codeUtils;    </span><br><span class="line">@CreateCache(name = &quot;smsCache&quot;, expire = 3600)    </span><br><span class="line">private Cache&lt;String, String&gt; jetSMSCache;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>操作缓存</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class SMSCodeServiceImpl implements SMSCodeService &#123;  </span><br><span class="line">@Override    </span><br><span class="line">public String sendCodeToSMS(String tele) &#123;        </span><br><span class="line">String code = this.codeUtils.generator(tele);        </span><br><span class="line">jetSMSCache.put(tele,code);        </span><br><span class="line">return code;    </span><br><span class="line">&#125;    </span><br><span class="line">@Override    </span><br><span class="line">public boolean checkCode(CodeMsg codeMsg) &#123;        </span><br><span class="line">String value = jetSMSCache.get(codeMsg.getTele());        </span><br><span class="line">return codeMsg.getCode().equals(value);    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：jetcache简介<br>②：jetcache远程缓存使用方式<br>③：jetcache本地缓存使用方式</p></li><li><p>启用方法注解</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication  </span><br><span class="line">@EnableCreateCacheAnnotation  </span><br><span class="line">@EnableMethodCache(basePackages = &quot;com.itheima&quot;)  </span><br><span class="line">public class Springboot20JetCacheApplication &#123;    </span><br><span class="line">public static void main(String[] args) &#123;        </span><br><span class="line">SpringApplication.run(Springboot20JetCacheApplication.class, </span><br><span class="line">args);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用方法注解操作缓存</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class BookServiceImpl implements BookService &#123;  </span><br><span class="line">@Autowired    </span><br><span class="line">private BookDao bookDao;  </span><br><span class="line"></span><br><span class="line">@Cached(name = &quot;smsCache_&quot;, key = &quot;#id&quot;, expire = 3600)    </span><br><span class="line">@CacheRefresh(refresh = 10,timeUnit = TimeUnit.SECONDS)    </span><br><span class="line">public Book getById(Integer id) &#123;        </span><br><span class="line">return bookDao.selectById(id);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class BookServiceImpl implements BookService &#123;  </span><br><span class="line">@CacheUpdate(name = &quot;smsCache_&quot;, key = &quot;#book.id&quot;, value = &quot;#book&quot;)    </span><br><span class="line">public boolean update(Book book) &#123;        </span><br><span class="line">return bookDao.updateById(book) &gt; 0;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@CacheInvalidate(name = &quot;smsCache_&quot;, key = &quot;#id&quot;)    </span><br><span class="line">public boolean delete(Integer id) &#123;        </span><br><span class="line">return bookDao.deleteById(id) &gt; 0;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缓存对象必须保障可序列化</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Data  </span><br><span class="line">public class Book implements Serializable &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072041660.png" alt=""></p><ul><li>查看缓存统计报告<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072041661.png" alt=""></li><li>小结<br>①：jetcache方法注解使用方式</li></ul></li><li><p>缓存供应商变更:j2cache</p><ul><li><p>j2cache是一个缓存整合框架，可以提供缓存的整合方案，使各种缓存搭配使用，自身不提供缓存功能</p></li><li><p>基于 ehcache + redis 进行整合</p></li><li><p>加入j2cache坐标，加入整合缓存的坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072042910.png" alt=""></p></li><li><p>配置使用j2cache（application.yml）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072042911.png" alt=""></p></li><li><p>配置一级缓存与二级缓存以及一级缓存数据到二级缓存的发送方式（j2cache.properties）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072042319.png" alt=""></p></li><li><p>设置使用缓存</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class SMSCodeServiceImpl implements SMSCodeService &#123;   </span><br><span class="line">@Autowired    </span><br><span class="line">private CodeUtils codeUtils;    </span><br><span class="line">@Autowired    </span><br><span class="line">private CacheChannel cacheChannel;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class SMSCodeServiceImpl implements SMSCodeService &#123;  </span><br><span class="line">@Override    </span><br><span class="line">public String sendCodeToSMS(String tele) &#123;        </span><br><span class="line">String code = codeUtils.generator(tele);        </span><br><span class="line">cacheChannel.set(&quot;sms&quot;,tele,code);        </span><br><span class="line">return code;    </span><br><span class="line">&#125;    </span><br><span class="line">@Override    </span><br><span class="line">public boolean checkCode(SMSCode smsCode) &#123;        </span><br><span class="line">String code = cacheChannel.get(&quot;sms&quot;,smsCode.getTele())</span><br><span class="line">.asString();        </span><br><span class="line">return smsCode.getCode().equals(code);    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：j2cache缓存的基础使用</p></li></ul></li></ul><h2 id="6-2-任务">6.2 任务</h2><ul><li>任务<ul><li><p>定时任务是企业级应用中的常见操作</p><ul><li>年度报表</li><li>缓存统计报告</li><li>… …</li></ul></li><li><p>市面上流行的定时任务技术</p><ul><li>Quartz</li><li>Spring Task</li></ul></li><li><p>SpringBoot整合Quartz</p><ul><li><p>相关概念</p><ul><li>工作（Job）：用于定义具体执行的工作</li><li>工作明细（JobDetail）：用于描述定时工作相关的信息</li><li>触发器（Trigger）：用于描述触发工作的规则，通常使用cron表达式定义调度规则</li><li>调度器（Scheduler）：描述了工作明细与触发器的对应关系</li></ul></li><li><p>导入SpringBoot整合quartz的坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072042320.png" alt=""></p></li><li><p>定义具体要执行的任务，继承QuartzJobBean</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class QuartzTaskBean extends QuartzJobBean &#123;    </span><br><span class="line">@Override    </span><br><span class="line">protected void executeInternal(JobExecutionContext context) throws </span><br><span class="line">JobExecutionException &#123;        </span><br><span class="line">System.out.println(“quartz job run... &quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义工作明细与触发器，并绑定对应关系</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">public class QuartzConfig &#123;    </span><br><span class="line">@Bean    </span><br><span class="line">public JobDetail printJobDetail()&#123;        </span><br><span class="line">return JobBuilder.newJob(QuartzTaskBean.class).storeDurably()</span><br><span class="line">.build();  </span><br><span class="line">&#125;    </span><br><span class="line">@Bean    </span><br><span class="line">public Trigger printJobTrigger() &#123;        </span><br><span class="line">CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder</span><br><span class="line">.cronSchedule(&quot;0/3 * * * * ?&quot;);        </span><br><span class="line">return TriggerBuilder.newTrigger().forJob(printJobDetail())</span><br><span class="line">.withSchedule(cronScheduleBuilder).build();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：SpringBoot整合Quartz</p><ul><li>工作（Job）</li><li>工作明细（JobDetail）</li><li>触发器（Trigger）</li><li>调度器（Scheduler）</li></ul></li><li><p>Spring Task</p><ul><li>开启定时任务功能</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication  </span><br><span class="line">@EnableScheduling  </span><br><span class="line">public class Springboot22TaskApplication &#123;    </span><br><span class="line">public static void main(String[] args) &#123;        </span><br><span class="line">SpringApplication.run(Springboot22TaskApplication.class, </span><br><span class="line">args);    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置定时执行的任务，并设定执行周期</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class ScheduledBean &#123;  </span><br><span class="line">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)    </span><br><span class="line">public void printLog()&#123;        </span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;:run...&quot;);    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定时任务相关配置<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072042321.png" alt=""></li></ul></li><li><p>小结<br>①：Spring Task</p><ul><li>@EnableScheduling</li><li>@Scheduled</li></ul></li></ul></li></ul><h2 id="6-3-邮件">6.3 邮件</h2><ul><li><p>SpringBoot整合JavaMail</p><ul><li><p>SMTP（Simple Mail Transfer Protocol）：简单邮件传输协议，用于发送电子邮件的传输协议</p></li><li><p>POP3（Post Office Protocol - Version 3）：用于接收电子邮件的标准协议</p></li><li><p>IMAP（Internet Mail Access Protocol）：互联网消息协议，是POP3的替代协议</p></li><li><p>导入SpringBoot整合JavaMail的坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072044779.png" alt=""></p></li><li><p>配置JavaMail<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072044780.png" alt=""></p></li><li><p>开启定时任务功能</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class SendMailServiceImpl implements SendMailService &#123;  </span><br><span class="line">private String from = &quot;********@qq.com&quot;;  // 发送人  </span><br><span class="line">private String to = &quot;********@126.com&quot;;  // 接收人  </span><br><span class="line">private String subject = &quot;测试邮件&quot;;  // 邮件主题  </span><br><span class="line">private String text = &quot;测试邮件正文&quot;;    // 邮件内容  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class SendMailServiceImpl implements SendMailService &#123;  </span><br><span class="line">@Autowired    </span><br><span class="line">private JavaMailSender javaMailSender;  </span><br><span class="line">@Override    </span><br><span class="line">public void sendMail() &#123;  </span><br><span class="line">SimpleMailMessage mailMessage = new SimpleMailMessage();        </span><br><span class="line">mailMessage.setFrom(from);        </span><br><span class="line">mailMessage.setTo(to);  </span><br><span class="line">mailMessage.setSubject(subject);        </span><br><span class="line">mailMessage.setText(text);  </span><br><span class="line">javaMailSender.send(mailMessage);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：SpringBoot整合JavaMail发送简单邮件</p></li><li><p>附件与HTML文本支持</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private String text = &quot;&lt;a href=&#x27;https://www.itcast.cn/&#x27;&gt;传智教育&lt;/a&gt;&quot;;  </span><br><span class="line">@Override  </span><br><span class="line">public void sendMail() &#123;  </span><br><span class="line">try &#123;  </span><br><span class="line">MimeMessage mimeMessage = javaMailSender.createMimeMessage();  </span><br><span class="line">MimeMessageHelper mimeMessageHelper = new MimeMessageHelper</span><br><span class="line">(mimeMessage,true);  </span><br><span class="line">mimeMessageHelper.setFrom(from);  </span><br><span class="line">mimeMessageHelper.setTo(to);  </span><br><span class="line">mimeMessageHelper.setSubject(subject);  </span><br><span class="line">mimeMessageHelper.setText(text,true);  </span><br><span class="line">File file = new File(&quot;logo.png&quot;);  </span><br><span class="line">mimeMessageHelper.addAttachment(&quot;美图.png&quot;,file);  </span><br><span class="line">javaMailSender.send(mimeMessage);  </span><br><span class="line">&#125; catch (Exception e) &#123;  </span><br><span class="line">e.printStackTrace();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小结<br>①：SpringBoot整合JavaMail发送邮件技巧</li></ul></li></ul><h2 id="6-4消息">6.4消息</h2><ul><li><p>消息</p><ul><li><p>消息发送方</p><ul><li>生产者</li></ul></li><li><p>消息接收方</p><ul><li>消费者</li></ul></li><li><p>同步消息</p></li><li><p>异步消息</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072045661.png" alt=""></p><ul><li><p>企业级应用中广泛使用的三种异步消息传递技术</p><ul><li>JMS</li><li>AMQP</li><li>MQTT</li></ul></li><li><p>JMS</p><ul><li>JMS（Java Message Service）：一个规范，等同于JDBC规范，提供了与消息服务相关的API接口</li><li>JMS消息模型<ul><li>peer-2-peer：点对点模型，消息发送到一个队列中，队列保存消息。队列的消息只能被一个消费者消费，或超时</li><li>publish-subscribe：发布订阅模型，消息可以被多个消费者消费，生产者和消费者完全独立，不需要感知对方的存在</li></ul></li><li>JMS消息种类<ul><li>TextMessage</li><li>MapMessage</li><li><code>BytesMessage</code></li><li>StreamMessage</li><li>ObjectMessage</li><li>Message （只有消息头和属性）</li></ul></li><li>JMS实现：ActiveMQ、Redis、HornetMQ、RabbitMQ、RocketMQ（没有完全遵守JMS规范）</li></ul></li><li><p>AMQP</p><ul><li>AMQP（advanced message queuing protocol）：一种协议（高级消息队列协议，也是消息代理规范），规范了网络交换的数据格式，兼容JMS</li><li>优点：具有跨平台性，服务器供应商，生产者，消费者可以使用不同的语言来实现</li><li>AMQP消息模型<ul><li>direct exchange</li><li>fanout exchange</li><li>topic exchange</li><li>headers exchange</li><li>system exchange</li></ul></li><li>AMQP消息种类：byte[]</li><li>AMQP实现：RabbitMQ、StormMQ、RocketMQ</li></ul></li><li><p>MQTT</p><ul><li>MQTT（Message Queueing Telemetry Transport）消息队列遥测传输，专为小设备设计，是物联网（IOT）生态系统中主要成分之一</li></ul></li><li><p>Kafka</p><ul><li>Kafka，一种高吞吐量的分布式发布订阅消息系统，提供实时消息功能。</li></ul></li><li><p>ActiveMQ</p></li><li><p>RabbitMQ</p></li><li><p>RocketMQ</p></li><li><p>Kafka</p></li><li><p>小结<br>①：消息概念与作用<br>②：JMS<br>③：AMQP<br>④：MQTT</p></li><li><p>消息案例——订单短信通知</p><ul><li>购物订单业务<ul><li>登录状态检测</li><li>生成主单</li><li>生成子单</li><li>库存检测与变更</li><li>积分变更</li><li>支付</li><li>短信通知（异步）</li><li>购物车维护</li><li>运单信息初始化</li><li>商品库存维护</li><li>会员维护</li><li>…</li></ul></li></ul></li><li><p>小结<br>①：订单短信通知案例</p></li><li><p>ActiveMQ</p><ul><li><p>下载地址：<a href="https://activemq.apache.org/components/classic/download/">https://activemq.apache.org/components/classic/download</a><a href="https://activemq.apache.org/components/classic/download/">/</a></p></li><li><p>安装：解压缩</p></li><li><p>启动服务<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072045405.png" alt=""></p></li><li><p>访问服务器<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072045406.png" alt=""></p><ul><li>服务端口：61616，管理后台端口：8161</li><li>用户名&amp;密码：admin</li></ul></li></ul></li><li><p>小结<br>①：ActiveMQ下载与安装<br>②：ActiveMQ服务启动（控制台）</p></li><li><p>SpringBoot整合ActiveMQ</p><ul><li>导入SpringBoot整合ActiveMQ坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072046790.png" alt=""></li><li>配置ActiveMQ（采用默认配置）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072046791.png" alt=""></li><li>生产与消费消息（使用默认消息存储队列）</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class MessageServiceActivemqImpl implements MessageService &#123;  </span><br><span class="line">@Autowired    </span><br><span class="line">private JmsMessagingTemplate jmsMessagingTemplate;  </span><br><span class="line"></span><br><span class="line">public void sendMessage(String id) &#123;        </span><br><span class="line">System.out.println(&quot;使用Active将待发送短信的订单纳入处理队列，</span><br><span class="line">id：&quot;+id);        </span><br><span class="line">jmsMessagingTemplate.convertAndSend(id);  </span><br><span class="line">&#125;  </span><br><span class="line">public String doMessage() &#123;        </span><br><span class="line">return jmsMessagingTemplate.receiveAndConvert(String.class);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>生产与消费消息（指定消息存储队列）</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class MessageServiceActivemqImpl implements MessageService &#123;  </span><br><span class="line">    @Autowired    </span><br><span class="line">    private JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">public void sendMessage(String id) &#123;        </span><br><span class="line">System.out.println(&quot;使用Active将待发送短信的订单纳入处理队列，</span><br><span class="line">id：&quot;+id);        </span><br><span class="line">jmsMessagingTemplate.convertAndSend(&quot;order.sm.queue.id&quot;,id);  </span><br><span class="line">&#125;  </span><br><span class="line">public String doMessage() &#123;        </span><br><span class="line">return jmsMessagingTemplate.receiveAndConvert</span><br><span class="line">(&quot;order.sm.queue.id&quot;,String.class);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用消息监听器对消息队列监听</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class MessageListener &#123;  </span><br><span class="line">@JmsListener(destination = &quot;order.sm.queue.id&quot;)    </span><br><span class="line">public void receive(String id)&#123;        </span><br><span class="line">System.out.println(&quot;已完成短信发送业务，id：&quot;+id);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>流程性业务消息消费完转入下一个消息队列</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class MessageListener &#123;  </span><br><span class="line">@JmsListener(destination = &quot;order.sm.queue.id&quot;)    </span><br><span class="line">@SendTo(&quot;order.other.queue.id&quot;)    </span><br><span class="line">public String receive(String id)&#123;        </span><br><span class="line">System.out.println(&quot;已完成短信发送业务，id：&quot;+id);        </span><br><span class="line">return &quot;new:&quot;+id;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：SpringBoot整合ActiveMQ</p></li><li><p>RabbitMQ</p><ul><li><p>RabbitMQ基于Erlang语言编写，需要安装Erlang</p></li><li><p>Erlang</p><ul><li>下载地址：<a href="https://www.erlang.org/downloads">https</a><a href="https://www.erlang.org/downloads">://www.erlang.org/downloads</a></li><li>安装：一键傻瓜式安装，安装完毕需要重启，需要依赖Windows组件</li><li>环境变量配置<ul><li>ERLANG_HOME</li><li>PATH</li></ul></li></ul></li><li><p>下载地址：<a href="https://rabbitmq.com/install-windows.html">https://</a><a href="https://rabbitmq.com/install-windows.html">rabbitmq.com/install-windows.html</a></p></li><li><p>安装：一键傻瓜式安装</p></li><li><p>启动服务<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072047936.png" alt=""></p></li><li><p>关闭服务<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072047735.png" alt=""></p></li><li><p>查看服务状态<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072047736.png" alt=""></p></li><li><p>服务管理可视化（插件形式）</p></li><li><p>查看已安装的插件列表<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072047737.png" alt=""></p></li><li><p>开启服务管理插件<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072047738.png" alt=""></p></li><li><p>访问服务器<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072047739.png" alt=""></p><ul><li>服务端口：5672，管理后台端口：15672</li><li>用户名&amp;密码：guest</li></ul></li></ul></li><li><p>小结<br>①：Erlang下载与安装（环境变量配置）<br>②：RabbitMQ下载与安装<br>③：RabbitMQ服务启动（服务）<br>④：RabbitMQ服务管理</p></li><li><p>SpringBoot整合RabbitMQ</p><ul><li>导入SpringBoot整合RabbitMQ坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072048206.png" alt=""></li><li>配置RabbitMQ （采用默认配置）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072048207.png" alt=""></li><li>定义消息队列(direct)</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">public class RabbitDirectConfig &#123;  </span><br><span class="line">@Bean    </span><br><span class="line">public Queue queue()&#123;        </span><br><span class="line">return new Queue(&quot;simple_queue&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">public class RabbitDirectConfig &#123;  </span><br><span class="line">@Bean    </span><br><span class="line">public Queue queue()&#123;        </span><br><span class="line">// durable:是否持久化,默认false        </span><br><span class="line">// exclusive:是否当前连接专用，默认false，连接关闭后队列即被删除        </span><br><span class="line">//autoDelete:是否自动删除,当生产者或消费者不再使用此队列,自动删除        </span><br><span class="line">return new Queue(&quot;simple_queue&quot;,true,false,false);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">public class RabbitDirectConfig &#123;  </span><br><span class="line">@Bean    </span><br><span class="line">public Queue directQueue()&#123;        </span><br><span class="line">return new Queue(&quot;direct_queue&quot;);      </span><br><span class="line">&#125;  </span><br><span class="line">@Bean    </span><br><span class="line">public Queue directQueue2()&#123;    </span><br><span class="line">return new Queue(&quot;direct_queue2&quot;);     </span><br><span class="line">&#125;  </span><br><span class="line">@Bean    </span><br><span class="line">public DirectExchange directExchange()&#123;        </span><br><span class="line">return new DirectExchange(&quot;directExchange&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">@Bean    </span><br><span class="line">public Binding bindingDirect()&#123;        </span><br><span class="line">return BindingBuilder.bind(directQueue()).to(directExchange())</span><br><span class="line">.with(&quot;direct&quot;);  </span><br><span class="line">&#125;    </span><br><span class="line">@Bean    </span><br><span class="line">public Binding bindingDirect2()&#123;        </span><br><span class="line">return BindingBuilder.bind(directQueue2()).to(directExchange())</span><br><span class="line">.with(&quot;direct2&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>生产与消费消息(direct)</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class MessageServiceRabbitmqDirectImpl implements MessageService </span><br><span class="line">&#123;    </span><br><span class="line">@Autowired    </span><br><span class="line">private AmqpTemplate amqpTemplate;    </span><br><span class="line">@Override    </span><br><span class="line">public void sendMessage(String id) &#123;        </span><br><span class="line">System.out.println(&quot;使用Rabbitmq将待发送短信的订单纳入处理队列，</span><br><span class="line">id：&quot;+id);        </span><br><span class="line">amqpTemplate.convertAndSend(&quot;directExchange&quot;,&quot;direct&quot;,id);    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用消息监听器对消息队列监听(direct)</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class RabbitMessageListener &#123;  </span><br><span class="line">@RabbitListener(queues = &quot;direct_queue&quot;)    </span><br><span class="line">public void receive(String id)&#123;        </span><br><span class="line">System.out.println(&quot;已完成短信发送业务，id：&quot;+id);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用多消息监听器对消息队列监听进行消息轮循处理(direct)</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class RabbitMessageListener2 &#123;  </span><br><span class="line">@RabbitListener(queues = &quot;direct_queue&quot;)    </span><br><span class="line">public void receive(String id)&#123;        </span><br><span class="line">System.out.println(&quot;已完成短信发送业务（two），id：&quot;+id);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：SpringBoot整合RabbitMQ直连交换机模式</p></li><li><p>定义消息队列(topic)</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">public class RabbitTopicConfig &#123;  </span><br><span class="line">@Bean    </span><br><span class="line">public Queue topicQueue()&#123;        </span><br><span class="line">return new Queue(&quot;topic_queue&quot;);    </span><br><span class="line">&#125;  </span><br><span class="line">@Bean    </span><br><span class="line">public Queue topicQueue2()&#123;      </span><br><span class="line"> return new Queue(&quot;topic_queue2&quot;);   </span><br><span class="line">&#125;  </span><br><span class="line">@Bean    </span><br><span class="line">public TopicExchange topicExchange()&#123;        </span><br><span class="line">return new TopicExchange(&quot;topicExchange&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">@Bean    </span><br><span class="line">public Binding bindingTopic()&#123;        </span><br><span class="line">return BindingBuilder.bind(topicQueue()).to(topicExchange())</span><br><span class="line">.with(&quot;topic.*.*&quot;);  </span><br><span class="line">&#125;    </span><br><span class="line">@Bean    </span><br><span class="line">public Binding bindingTopic2()&#123;        </span><br><span class="line">return BindingBuilder.bind(topicQueue2()).to(topicExchange())</span><br><span class="line">.with(&quot;topic.#&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>绑定键匹配规则</p><ul><li>*  (星号)： 用来表示一个单词 ，且该单词是必须出现的</li><li>#  (井号)： 用来表示任意数量<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072048513.png" alt=""></li></ul></li><li><p>生产与消费消息(topic)</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class MessageServiceRabbitmqTopicmpl implements MessageService &#123;    </span><br><span class="line">@Autowired    </span><br><span class="line">private AmqpTemplate amqpTemplate;    </span><br><span class="line">@Override    </span><br><span class="line">public void sendMessage(String id) &#123;        </span><br><span class="line">System.out.println(&quot;使用Rabbitmq将待发送短信的订单纳入处理队列，</span><br><span class="line">id：&quot;+id);        </span><br><span class="line">amqpTemplate.convertAndSend(&quot;topicExchange&quot;,&quot;topic.order.id&quot;,id);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用消息监听器对消息队列监听(topic)</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class RabbitTopicMessageListener &#123;    </span><br><span class="line">@RabbitListener(queues = &quot;topic_queue&quot;)    </span><br><span class="line">public void receive(String id)&#123;        </span><br><span class="line">System.out.println(&quot;已完成短信发送业务，id：&quot;+id);  </span><br><span class="line">&#125;  </span><br><span class="line">@RabbitListener(queues = &quot;topic_queue2&quot;)    </span><br><span class="line">public void receive2(String id)&#123;        </span><br><span class="line">    System.out.println(&quot;已完成短信发送业务(two)，id：&quot;+id);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小结<br>①：SpringBoot整合RabbitMQ主题交换机模式</li></ul></li><li><p>RocketMQ</p><ul><li><p>下载地址：<a href="https://rocketmq.apache.org/">https://rocketmq.apache.org</a><a href="https://rocketmq.apache.org/">/</a></p></li><li><p>安装：解压缩</p><ul><li>默认服务端口：9876</li></ul></li><li><p>环境变量配置</p><ul><li>ROCKETMQ_HOME</li><li>PATH</li><li>NAMESRV_ADDR （建议）： 127.0.0.1:9876</li></ul></li><li><p>命名服务器与broker<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072049638.png" alt=""></p></li><li><p>启动命名服务器<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072049347.png" alt=""></p></li><li><p>启动broker<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072049348.png" alt=""></p></li><li><p>服务器功能测试：生产者<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072049349.png" alt=""></p></li><li><p>服务器功能测试：消费者<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072050576.png" alt=""></p></li></ul></li><li><p>小结<br>①：RocketMQ下载与安装（环境变量配置）<br>②：命名服务器启动（控制台）<br>③：broker服务启动（控制台）<br>④：消息生产消费测试</p></li><li><p>SpringBoot整合RocketMQ</p><ul><li>导入SpringBoot整合RocketMQ坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072050054.png" alt=""></li><li>配置RocketMQ （采用默认配置）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072050055.png" alt=""></li><li>生产消息</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class MessageServiceRocketmqImpl implements MessageService &#123;  </span><br><span class="line"> @Autowired    </span><br><span class="line"> private RocketMQTemplate rocketMQTemplate;  </span><br><span class="line"> @Override    </span><br><span class="line"> public void sendMessage(String id) &#123;</span><br><span class="line"> rocketMQTemplate.convertAndSend(&quot;order_sm_id&quot;,id);  </span><br><span class="line"> System.out.println(&quot;使用Rabbitmq将待发送短信的订单纳入处理队列，</span><br><span class="line"> id：&quot;+id);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>生产异步消息</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class MessageServiceRocketmqImpl implements MessageService &#123;  </span><br><span class="line">@Autowired    </span><br><span class="line">private RocketMQTemplate rocketMQTemplate;  </span><br><span class="line">@Override    </span><br><span class="line">public void sendMessage(String id) &#123;  </span><br><span class="line">SendCallback callback = new SendCallback() &#123;            </span><br><span class="line">@Override            </span><br><span class="line">public void onSuccess(SendResult sendResult) &#123;</span><br><span class="line">ystem.out.println(&quot;消息发送成功&quot;);  </span><br><span class="line">&#125;      </span><br><span class="line">     </span><br><span class="line">@Override            </span><br><span class="line">public void onException(Throwable throwable) &#123;</span><br><span class="line">System.out.println(&quot;消息发送失败！！！！！！！！！！！&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;;        </span><br><span class="line">System.out.println(&quot;使用Rabbitmq将待发送短信的订单纳入处理队列，</span><br><span class="line">id：&quot;+id);        </span><br><span class="line">rocketMQTemplate.asyncSend(&quot;order_sm_id&quot;,id,callback);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用消息监听器对消息队列监听</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">@RocketMQMessageListener(topic=&quot;order_sm_id&quot;,consumerGroup = </span><br><span class="line">&quot;group_rocketmq&quot;)  </span><br><span class="line">public class RocketmqMessageListener implements RocketMQListener&lt;String&gt; </span><br><span class="line">&#123;    </span><br><span class="line">@Override    </span><br><span class="line">public void onMessage(String id) &#123;        </span><br><span class="line">System.out.println(&quot;已完成短信发送业务，id：&quot;+id);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：SpringBoot整合RocketMQ</p></li><li><p>Kafka</p><ul><li><p>下载地址：<a href="https://kafka.apache.org/downloads">https://</a><a href="https://kafka.apache.org/downloads">kafka.apache.org/downloads</a></p><ul><li>windows 系统下3.0.0版本存在BUG，建议使用2.X版本</li></ul></li><li><p>安装：解压缩</p></li><li><p>启动zookeeper<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072051609.png" alt=""></p><ul><li>默认端口：2181</li></ul></li><li><p>启动kafka<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072051610.png" alt=""></p><ul><li>默认端口：9092</li></ul></li><li><p>创建topic<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072051626.png" alt=""></p></li><li><p>查看topic<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072051628.png" alt=""></p></li><li><p>删除topic<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072051629.png" alt=""></p></li><li><p>生产者功能测试<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072051630.png" alt=""></p></li><li><p>消费者功能测试<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072056968.png" alt=""></p></li></ul></li><li><p>小结<br>①：Kafka下载与安装（环境变量配置）<br>②：zookeeper启动（控制台）<br>③：kafka服务启动（控制台）<br>④：topic维护<br>⑤：消息生产消费测试</p></li><li><p>SpringBoot整合Kafka</p><ul><li>导入SpringBoot整合Kafka坐标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072100432.png" alt=""></li><li>配置Kafka （采用默认配置）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072100433.png" alt=""></li><li>生产消息</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class MessageServiceKafkaImpl implements MessageService &#123;  </span><br><span class="line">@Autowired   </span><br><span class="line">private KafkaTemplate&lt;String ,String&gt; kafkaTemplate;  </span><br><span class="line">@Override    </span><br><span class="line">public void sendMessage(String id) &#123;        </span><br><span class="line">System.out.println(&quot;使用Kafka将待发送短信的订单纳入处理队列，</span><br><span class="line">id：&quot;+id);        </span><br><span class="line">kafkaTemplate.send(&quot;kafka_topic&quot;,id);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用消息监听器对消息队列监听</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class KafkaMessageListener&#123;  </span><br><span class="line">@KafkaListener(topics = &#123;&quot;kafka_topic&quot;&#125;)    </span><br><span class="line">public void onMessage(ConsumerRecord&lt;?, ?&gt; record) &#123; </span><br><span class="line">    System.out.println(&quot;已完成短信发送业务，id：&quot;+record.value());  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：SpringBoot整合Kafka</p></li></ul></li></ul><h1>7. 监控</h1><h2 id="7-1-监控的意义">7.1 监控的意义</h2><ul><li><p>监控的意义</p><ul><li>监控服务状态是否宕机</li><li>监控服务运行指标（内存、虚拟机、线程、请求等）</li><li>监控日志</li><li>管理服务（服务下线）</li></ul></li><li><p>监控的实施方式</p><ul><li>显示监控信息的服务器：用于获取服务信息，并显示对应的信息</li><li>运行的服务：启动时主动上报，告知监控服务器自己需要受到监控</li></ul></li></ul><h2 id="7-2-可视化监控平台">7.2 可视化监控平台</h2><ul><li><p>可视化监控平台</p><ul><li><p>Spring Boot Admin，开源社区项目，用于管理和监控SpringBoot应用程序。 客户端注册到服务端后，通过HTTP请求方式，服务端定期从客户端获取对应的信息，并通过UI界面展示对应信息。</p></li><li><p>Admin服务端<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072100839.png" alt=""></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072100840.png" alt=""></p><ul><li>Admin服务端<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072100841.png" alt=""></li><li>Admin客户端<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072101625.png" alt=""></li><li>Admin服务端<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072101626.png" alt=""></li><li>设置启用Spring-Admin</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication  </span><br><span class="line">@EnableAdminServer  </span><br><span class="line">public class Springboot25ActuatorServerApplication &#123;  </span><br><span class="line">public static void main(String[] args) &#123;        </span><br><span class="line">SpringApplication.run(Springboot25ActuatorServerApplication.class, </span><br><span class="line">args);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Admin客户端<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072101967.png" alt=""></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072101968.png" alt=""></p></li><li><p>小结<br>①：可视化监控平台——Spring Boot Admin<br>②：配置通过web端读取监控信息</p></li></ul><h2 id="7-3-监控原理">7.3 监控原理</h2><ul><li><p>监控原理</p><ul><li>Actuator提供了SpringBoot生产就绪功能，通过端点的配置与访问，获取端点信息</li><li>端点描述了一组监控信息，SpringBoot提供了多个内置端点，也可以根据需要自定义端点信息</li><li>访问当前应用所有端点信息：<code>/actuator</code></li><li>访问端点详细信息：/actuator<code>/端点名称</code><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072102737.png" alt=""></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072102738.png" alt=""></p><ul><li>Web程序专用端点<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072102952.png" alt=""></li><li>启用指定端点<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072103480.png" alt=""></li><li>启用所有端点<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072103842.png" alt=""></li><li>暴露端点功能<ul><li>端点中包含的信息存在敏感信息，需要对外暴露端点功能时手动设定指定端点信息<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072104413.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072104414.png" alt=""></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072104415.png" alt=""></p></li><li><p>小结<br>①：Actuator<br>②：端点功能开启与关闭<br>③：端点功能暴露</p></li></ul><h2 id="7-4-自定义监控指标">7.4 自定义监控指标</h2><ul><li>自定义监控指标<ul><li>为info端点添加自定义指标<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_develop/202404072103843.png" alt=""></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class AppInfoContributor implements InfoContributor &#123;    </span><br><span class="line">@Override    </span><br><span class="line">public void contribute(Info.Builder builder) &#123;        </span><br><span class="line">Map&lt;String,Object&gt; infoMap = new HashMap&lt;&gt;();        </span><br><span class="line">infoMap.put(&quot;buildTime&quot;,&quot;2006&quot;);  </span><br><span class="line">builder.withDetail(&quot;runTime&quot;,System.currentTimeMillis())</span><br><span class="line">.withDetail(&quot;company&quot;,&quot;传智教育&quot;);  </span><br><span class="line">builder.withDetails(infoMap);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：自定义info端点信息</p></li><li><p>为Health端点添加自定义指标</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class AppHealthContributor extends AbstractHealthIndicator &#123;    </span><br><span class="line">@Override    </span><br><span class="line">protected void doHealthCheck(Health.Builder builder) throws Exception </span><br><span class="line">&#123;        </span><br><span class="line">boolean condition = true;        </span><br><span class="line">if(condition)&#123;            </span><br><span class="line">Map&lt;String,Object&gt; infoMap = new HashMap&lt;&gt;();            </span><br><span class="line">infoMap.put(&quot;buildTime&quot;,&quot;2006&quot;);  </span><br><span class="line">builder.withDetail(&quot;runTime&quot;,System.currentTimeMillis())  </span><br><span class="line">.withDetail(&quot;company&quot;,&quot;传智教育&quot;);  </span><br><span class="line">builder.withDetails(infoMap);  </span><br><span class="line">builder.status(Status.UP);  </span><br><span class="line">&#125;else&#123;  </span><br><span class="line">builder.status(Status.DOWN);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：自定义Health端点信息</p></li><li><p>为Metrics端点添加自定义指标</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Service  </span><br><span class="line">public class BookServiceImpl extends ServiceImpl&lt;BookDao, Book&gt; implements </span><br><span class="line">IBookService &#123;    </span><br><span class="line">private Counter counter;    </span><br><span class="line">public BookServiceImpl(MeterRegistry meterRegistry)&#123;        </span><br><span class="line">counter = meterRegistry.counter(&quot;用户付费操作次数：&quot;);  </span><br><span class="line">&#125;    </span><br><span class="line">@Override    </span><br><span class="line">public boolean delete(Integer id) &#123;        </span><br><span class="line">counter.increment();        </span><br><span class="line">return bookDao.deleteById(id) &gt; 0;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：自定义Metrics端点信息</p></li><li><p>自定义端点</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Component  </span><br><span class="line">@Endpoint(id=&quot;pay&quot;)  </span><br><span class="line">public class PayEndPoint &#123;  </span><br><span class="line">@ReadOperation    </span><br><span class="line">public Object getPay()&#123;        </span><br><span class="line">//调用业务操作，获取支付相关信息结果，最终return出去        </span><br><span class="line">Map payMap = new HashMap();        </span><br><span class="line">payMap.put(&quot;level 1&quot;,103);        </span><br><span class="line">payMap.put(&quot;level 2&quot;,315);        </span><br><span class="line">payMap.put(&quot;level 3&quot;,666);  </span><br><span class="line">return payMap;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小结<br>①：自定义端点</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 开发实用篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot基础篇</title>
      <link href="/posts/basic.html"/>
      <url>/posts/basic.html</url>
      
        <content type="html"><![CDATA[<div class="note warning flat"><p>注意：少数展示代码与图片有些许不一致是因为我用的SpringBoot的版本不同以及Settings里的命名没有完全按照黑马讲解的来导致的!，其余大部分都是黑马的。</p></div><h1>1. 前置知识</h1><h2 id="1-1-Java基础语法">1.1 Java基础语法</h2><h2 id="1-2-SpringBoot与SpringMVC">1.2 SpringBoot与SpringMVC</h2><ul><li>知道Spring是用来管理bean，能够基于Restful实现页面请求交互功能</li></ul><h2 id="1-3-Mybatis与Mybatis-Plus">1.3 Mybatis与Mybatis-Plus</h2><ul><li>基于Mybatis和MybatisPlus能够开发出包含基础CRUD功能的标准Dao模块</li></ul><h2 id="1-4-数据库MySQL">1.4 数据库MySQL</h2><ul><li>能够读懂基础CRUD功能的SQL语句</li></ul><h2 id="1-5-服务器">1.5 服务器</h2><ul><li>知道服务器与web工程的关系，熟悉web服务器的基础配置</li></ul><h2 id="1-6-maven">1.6 maven</h2><ul><li>知道maven的依赖关系，知道什么是依赖范围，依赖传递，排除依赖，可选依赖，继承</li></ul><h2 id="1-7-web技术（含vue，ElementUI">1.7 web技术（含vue，ElementUI)</h2><ul><li>知道vue如何发送ajax请求，如何获取响应数据，如何进行数据模型双向绑定</li></ul><h1>2. 快速上手SpringBoot</h1><h2 id="2-1-SpringBoot入门程序开发">2.1 SpringBoot入门程序开发</h2><ul><li><p>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来<span class='p red'>简化</span>Spring应用的<span class='p red'>初始搭建</span>以及<span class='p red'>开发过程</span></p><ul><li>Spring程序缺点<ul><li>依赖设置繁琐</li><li>配置繁琐</li></ul></li><li>SpringBoot程序优点<ul><li>起步依赖（简化依赖配置）</li><li>起步依赖（简化依赖配置）</li><li>辅助功能（内置服务器，……）</li></ul></li></ul></li><li><p>入门案例-01</p><ul><li>基于IDEA创建项目<ul><li>步骤<br>①：创建新模块，选择Spring Initializr，并配置模块相关基础信息<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403231250780.png" alt=""><br>②：选择当前模块需要使用的技术集<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403231252053.png" alt=""><br>③：开发控制器类  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//Rest模式 </span><br><span class="line">@RestController </span><br><span class="line">@RequestMapping(&quot;/books&quot;) </span><br><span class="line">public class BookController &#123; </span><br><span class="line">@GetMapping </span><br><span class="line">public String getById()&#123; </span><br><span class="line">System.out.println(&quot;springboot is running...&quot;); </span><br><span class="line">return &quot;springboot is running...&quot;; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>④：运行自动生成的Application类<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403231252977.png" alt=""></li></ul></li><li>最简SpringBoot程序所包含的基础文件<ul><li>pom.xml文件</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; </span><br><span class="line">            xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">            xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 </span><br><span class="line">            https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">       &lt;modelVersion&gt;4.0.0&lt;modelVersion&gt;</span><br><span class="line">       &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;  </span><br><span class="line">&lt;version&gt;3.2.3&lt;/version&gt;  </span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.chengjie&lt;/groupId&gt;  </span><br><span class="line">&lt;artifactId&gt;springboot_quickstart&lt;/artifactId&gt;  </span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;  </span><br><span class="line">&lt;name&gt;springboot_quickstart&lt;/name&gt;  </span><br><span class="line">&lt;description&gt;springboot_quickstart&lt;/description&gt;  </span><br><span class="line">&lt;properties&gt;        </span><br><span class="line">&lt;java.version&gt;17&lt;/java.version&gt;  </span><br><span class="line">&lt;/properties&gt;    </span><br><span class="line">&lt;dependencies&gt;        </span><br><span class="line">&lt;dependency&gt;            </span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">    </span><br><span class="line">    &lt;dependency&gt;            </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;  </span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;  </span><br><span class="line">    &lt;/dependency&gt;    </span><br><span class="line">&lt;/dependencies&gt;  </span><br><span class="line"></span><br><span class="line">&lt;build&gt;        </span><br><span class="line">&lt;plugins&gt;            </span><br><span class="line">&lt;plugin&gt;                </span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;  </span><br><span class="line">        &lt;/plugin&gt;        </span><br><span class="line">    &lt;/plugins&gt;    </span><br><span class="line">&lt;/build&gt;  </span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ul><li>Application类</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication </span><br><span class="line">public class Application &#123; </span><br><span class="line">public static void main(String[] args) &#123; </span><br><span class="line">SpringApplication.run(Application.class, args); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Spring程序与SpringBoot程序对比<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232013390.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232013181.png" alt=""></li><li>小结<br>①：开发SpringBoot程序可以根据向导进行联网快速制作<br>②：SpringBoot程序需要基于JDK8进行制作 <code>（PS：JDK17同样可以，其他版本不清楚）</code><br>③：SpringBoot程序中需要使用何种功能通过勾选选择技术<br>④：运行SpringBoot程序通过运行Application程序入口进行</li></ul></li><li><p>入门案例-02</p><ul><li>基于SpringBoot官网创建项目，地址：<code>https://start.spring.io/</code><ul><li>步骤<br>①：打开官网，找到<code>Quickstart Your Project</code><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403231252680.png" alt=""><br>②：点击进入并修改settings<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232014746.png" alt=""><br>③：最后将下载好的压缩包解压并导入SpringBoot的项目文件中</li></ul></li><li>小结<br>①：打开SpringBoot官网，选择QuickstartYour Project<br>②：创建工程，并保存项目<br>③：解压项目，通过IDE导入项目</li></ul></li><li><p>入门案例-03</p><ul><li>基于阿里云创建项目，地址：<code>https://start.aliyun.com</code><ul><li>步骤 （与<code>入门案例-01</code>相同，只是提供服务的下载地址变了）<br>①：<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232015348.png" alt=""><br>②：<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232015536.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232016981.png" alt=""></li></ul></li><li>小结<br>①：选择start来源为自定义URL<br>②：输入阿里云start地址<br>③：创建项目</li></ul></li><li><p>入门案例-04</p><ul><li>手工创建项目（手工导入坐标）</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span><br><span class="line"> http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.5.4&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springboot_01_03_quickstart&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ul><li>手工创建项目（手工制作引导类）</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.itheima; </span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication; </span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication; </span><br><span class="line"></span><br><span class="line">@SpringBootApplication </span><br><span class="line">public class Application &#123; </span><br><span class="line">public static void main(String[] args) &#123; </span><br><span class="line">SpringApplication.run(Application.class,args); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小结<br>①：创建普通Maven工程<br>②：继承spring-boot-starter-parent<br>③：添加依赖spring-boot-starter-web<br>④：制作引导类Application</li></ul></li><li><p>小技巧：<code>隐藏指定文件/文件夹</code><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232017387.png" alt=""></p></li></ul><h2 id="2-2-浅谈入门程序工作原理">2.2 浅谈入门程序工作原理</h2><ul><li>入门案例解析<ul><li><u>parent</u><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232018227.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232018376.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232019502.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232019639.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232020665.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232020736.png" alt=""></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span><br><span class="line"> http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.5.4&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springboot_01_03_quickstart&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：开发SpringBoot程序要继承spring-boot-starter-parent<br>②：spring-boot-starter-parent中定义了若干个依赖管理<br>③：继承parent模块可以避免多个依赖使用相同技术时出现依赖版本冲突<br>④：继承parent的形式也可以采用引入依赖的形式实现效果</p></li><li><p><u>starter</u><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232021156.png" alt=""></p></li><li><p>小结<br>①：开发SpringBoot程序需要导入坐标时通常导入对应的starter<br>②：每个不同的starter根据功能不同，通常包含多个依赖坐标<br>③：使用starter可以实现快速配置的效果，达到简化配置的目的</p></li><li><p>parent与starter</p><ul><li>parent<ul><li>所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</li><li>spring-boot-starter-parent各版本间存在着诸多坐标版本不同</li></ul></li><li>starter<ul><li>SpringBoot中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的</li></ul></li><li>实际开发<ul><li>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供，除非SpringBoot未提供对应版本V</li><li>如发生坐标错误，再指定Version（要小心版本冲突）</li></ul></li></ul></li><li><p><u>引导类</u></p><ul><li>启动方式</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication </span><br><span class="line">public class Springboot01QuickstartApplication &#123; </span><br><span class="line">public static void main(String[] args) &#123; </span><br><span class="line">SpringApplication.run(Springboot01QuickstartApplication.class, args);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目</li><li>SpringBoot工程运行后初始化Spring容器，扫描引导类所在包加载bean</li></ul></li><li><p>小结<br>①：SpringBoot工程提供引导类用来启动程序<br>②：SpringBoot工程启动后创建并初始化Spring容器</p></li><li><p><u>内嵌tomcat</u></p><ul><li>辅助功能<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232021892.png" alt=""></li><li>使用maven依赖管理变更起步依赖项<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232022073.png" alt=""></li><li>Jetty比Tomcat更轻量级，可扩展性更强（相较于Tomcat），谷歌应用引擎（GAE）已经全面切换为Jetty</li><li>内置服务器 (补充)<ul><li>tomcat(默认)     apache出品，粉丝多，应用面广，负载了若干较重的组件</li><li>jetty     更轻量级，负载性能远不及tomcat</li><li>undertow     undertow，负载性能勉强跑赢tomcat</li></ul></li></ul></li><li><p>小结<br>①：内嵌Tomcat服务器是SpringBoot辅助功能之一<br>②：内嵌Tomcat工作原理是将Tomcat服务器作为对象运行并将该对象交给Spring容器管理<br>③：变更内嵌服务器思想是去除现有服务器，添加全新的服务 器</p></li></ul></li></ul><h1>3. 基础配置</h1><h2 id="3-1-属性配置">3.1 属性配置</h2><ul><li><p>教你一招：<code>复制工程</code></p><ul><li>原则<ul><li>保留工程基础结构</li><li>抹掉原始工程痕迹</li></ul></li><li>小结<br>①：在工作空间中复制对应工程，并修改工程名称<br>②：删除与Idea相关配置文件，仅保留src目录与pom.xml文件<br>③：修改pom.xml文件中的artifactId与新工程/模块名相同<br>④：删除name标签（可选）<br>⑤：保留备份工程供后期使用</li></ul></li><li><p>属性配置</p><ul><li><p>修改服务器端口<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232024152.png" alt=""></p></li><li><p>SpringBoot默认配置文件application.properties，通过键值对配置对应属性</p></li><li><p>修改配置-01</p><ul><li>修改服务器端口</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：SpringBoot默认配置文件application.properties</p></li><li><p>修改配置-02</p><ul><li>修改服务器端口</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br></pre></td></tr></table></figure><ul><li>关闭运行日志图标（banner）</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.main.banner-mode=off</span><br></pre></td></tr></table></figure><ul><li>设置日志相关</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.level.root=debug</span><br></pre></td></tr></table></figure></li><li><p>SpringBoot内置属性查询</p><ul><li><code>https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties</code></li><li>官方文档中参考文档第一项：Application Properties</li></ul></li><li><p>小结<br>①：SpringBoot中导入对应starter后，提供对应配置属性<br>②：书写SpringBoot配置采用关键字+提示形式书写</p></li><li><p>SpringBoot提供了多种属性配置方式</p><ul><li>application.properties</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server: </span><br><span class="line">port: 81</span><br></pre></td></tr></table></figure><ul><li>application.yaml</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server: </span><br><span class="line">port: 82</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：SpringBoot提供了3种配置文件的格式</p><ul><li>properties（传统格式/默认格式）</li><li><font color="#ff0000"><b>yml（主流格式）</b></font></li><li>yaml</li></ul></li><li><p>SpringBoot配置文件加载顺序</p><ul><li><code>application.properties   &gt;   application.yml   &gt;   application.yaml</code></li></ul></li><li><p>常用配置文件种类</p><ul><li>application.yml</li></ul></li><li><p>小结<br>①：配置文件间的加载优先级</p><ul><li>properties（最高）</li><li>yml</li><li>yaml（最低）</li></ul><p>②：不同配置文件中相同配置按照加载优先级相互覆盖,不同配置文件中不同配置全部保留</p></li></ul></li><li><p>教你一招：<code>自动提示功能消失解决方案</code><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232026255.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232026075.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232029557.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232029078.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232030611.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232030792.png" alt=""></p><ul><li>小结<br>①：指定SpringBoot配置文件<ul><li>Setting → Project Structure → Facets</li><li>选中对应项目/工程</li><li>Customize Spring Boot</li><li>选择配置文件</li></ul></li></ul></li></ul><h2 id="3-2-yaml文件">3.2 yaml文件</h2><ul><li><code>yaml</code><ul><li><p>YAML（YAML Ain’t Markup Language），一种数据序列化格式</p></li><li><p>优点：</p><ul><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心，重数据轻格式</li></ul></li><li><p>YAML文件扩展名</p><ul><li><font color="#ff0000"><b>.yml（主流）</b></font></li><li>.yaml<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232031584.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232031379.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232031169.png" alt=""></li></ul></li><li><p>yaml语法规则</p><ul><li><p>大小写敏感</p></li><li><p>属性层级关系使用多行描述，每行结尾使用冒号结束</p></li><li><p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</p></li><li><p>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</p></li><li><p><code>#</code>表示注释</p></li><li><p>核心规则：<font color="#ff0000"><b>数据前面要加空格与冒号隔开</b></font></p></li><li><p>字面值表示方式<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232032088.png" alt=""></p></li><li><p>数组表示方式：在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232032304.png" alt=""></p></li></ul></li><li><p>小结<br>①：yaml语法规则<br>②：注意属性名冒号后面与数据之间有一个<font color="#ff0000"><b>空格</b></font><br>③：字面值、对象数据格式、数组数据格式（略）</p></li></ul></li></ul><h2 id="3-3-yaml数据读取">3.3 yaml数据读取</h2><ul><li>yaml数据读取<ul><li><p>使用@Value读取单个数据，属性名引用方式：<font color="#ff0000"><b>${一级属性名.二级属性名……}</b></font><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232033676.png" alt=""></p></li><li><p>小结<br>①：使用@Value配合SpEL读取单个数据<br>②：如果数据存在多层级，依次书写层级名称即可</p></li><li><p>在配置文件中可以使用属性名引用方式引用属性<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232034952.png" alt=""></p></li><li><p>属性值中如果出现转移字符，需要使用双引号包裹<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232034612.png" alt=""></p></li><li><p>小结<br>①：在配置文件中可以使用${属性名}方式引用属性值<br>②：如果属性中出现特殊字符，可以使用双引号包裹起来作为字符解析</p></li><li><p>封装全部数据到Environment对象<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232035261.png" alt=""></p></li><li><p>小结<br>①：使用Environment对象封装全部配置信息<br>②：使用@Autowired自动装配数据到Environment对象中</p></li><li><p>自定义对象封装指定数据<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232035836.png" alt=""></p></li><li><p>自定义对象封装指定数据的作用<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232035577.png" alt=""></p></li><li><p>小结<br>①：使用@ConfigurationProperties注解绑定配置信息到封装类中<br>②：封装类需要定义为Spring管理的bean，否则无法进行属性注入</p></li></ul></li></ul><h1>4. 整合第三方技术</h1><h2 id="4-1-整合JUnit">4.1 整合JUnit</h2><ul><li>SpringBoot整合JUnit</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest </span><br><span class="line">class Springboot07JunitApplicationTests &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private BookService bookService; </span><br><span class="line"></span><br><span class="line">@Test </span><br><span class="line">public void testSave()&#123; </span><br><span class="line">bookService.save(); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>解析</p><ul><li>名称：@SpringBootTest</li><li>类型：<font color="#ff0000"><b>测试类注解</b></font></li><li>位置：测试类定义上方</li><li>作用：设置JUnit加载的SpringBoot启动类</li><li>范例：</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest </span><br><span class="line">class Springboot05JUnitApplicationTests &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：导入测试对应的starter<br>②：测试类使用@SpringBootTest修饰<br>③：使用自动装配的形式添加要测试的对象</p></li><li><p>解析</p><ul><li>名称：@SpringBootTest</li><li>类型：测试类注解</li><li>位置：测试类定义上方</li><li>作用：设置JUnit加载的SpringBoot启动类</li><li>范例：</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest (classes = Springboot05JUnitApplication.class)</span><br><span class="line">class Springboot07JUnitApplicationTests &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>相关属性<ul><li>classes：设置SpringBoot启动类<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232036071.png" alt=""></li></ul></li></ul></li><li><p>小结<br>①：测试类如果存在于引导类所在包或子包中无需指定引导类<br>②：测试类如果不存在于引导类所在的包或子包中需要通过classes 属性指定引导类</p></li></ul><h2 id="4-2-整合MyBatis">4.2 整合MyBatis</h2><ul><li><p>核心配置：数据库连接相关信息（连什么？连谁？什么权限）</p></li><li><p>映射配置：SQL映射（XML/注解）</p></li><li><p>SpringBoot整合MyBatis步骤<br>①：创建新模块，选择Spring初始化，并配置模块相关基础信息<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232037305.png" alt=""><br>②：选择当前模块需要使用的技术集（MyBatis、MySQL）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232038163.png" alt=""><br>③：设置数据源参数<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232040714.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232040312.png" alt=""></p><ul><li><p>小结<br>①：MySQL 8.X驱动强制要求设置时区</p><ul><li>修改url，添加serverTimezone设定</li><li>修改MySQL数据库配置（略）</li></ul><p>②：驱动类过时，提醒更换为<code>com.mysql.cj.jdbc.Driver</code></p></li></ul><p>④：定义数据层接口与映射配置</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Mapper </span><br><span class="line">public interface UserDao &#123; </span><br><span class="line">@Select(&quot;select * from user&quot;) </span><br><span class="line">public List getAll(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤：测试类中注入dao接口，测试功能</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest </span><br><span class="line">class Springboot08MybatisApplicationTests &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private BookDao bookDao; </span><br><span class="line"></span><br><span class="line">@Test </span><br><span class="line">public void testGetById() &#123; </span><br><span class="line">Book book = bookDao.getById(1); </span><br><span class="line">System.out.println(book); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：勾选MyBatis技术，也就是导入MyBatis对应的starter<br>②：数据库连接相关信息转换成配置<br>③：数据库SQL映射需要添加@Mapper被容器识别到</p></li></ul><h2 id="4-3-整合MyBatis-Plus">4.3 整合MyBatis-Plus</h2><ul><li><p>MyBatis-Plus与MyBatis区别</p><ul><li>导入坐标不同</li><li>数据层实现简化</li></ul></li><li><p>SpringBoot整合MyBatis-Plus步骤<br>①：手动添加SpringBoot整合MyBatis-Plus的坐标，可以通过mvnrepository获取<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232041381.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232041421.png" alt=""><br>②：定义数据层接口与映射配置，继承<code>BaseMapper</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Mapper </span><br><span class="line">public interface UserDao extends BaseMapper &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③：其他同SpringBoot整合MyBatis</p></li><li><p>小结<br>①：手工添加MyBatis-Plus对应的starter<br>②：数据层接口使用BaseMapper简化开发<br>③：需要使用的第三方技术无法通过勾选确定时，需要手工添加坐标</p></li></ul><h2 id="4-4-整合Druid">4.4 整合Druid</h2><ul><li>指定数据源类型<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232042237.png" alt=""></li><li>导入Druid对应的starter<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232042609.png" alt=""></li><li>变更Druid的配置方式<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232042909.png" alt=""></li><li>小结<br>①：整合Druid需要导入Druid对应的starter<br>②：根据Druid提供的配置方式进行配置<br>③：整合第三方技术通用方式<ul><li>导入对应的starter</li><li>根据提供的配置格式，配置非默认值对应的配置项</li></ul></li></ul><h1>5. 基于SpringBoot的SSMP整合案例</h1><h2 id="5-1-SSMP整合案例">5.1 SSMP整合案例</h2><ul><li><p>案例效果演示</p></li><li><p>案例实现方案分析</p><ul><li>实体类开发----使用Lombok快速制作实体类</li><li>Dao开发----整合MyBatisPlus，制作数据层测试类</li><li>Service开发----基于MyBatisPlus进行增量开发，制作业务层测试类</li><li>Controller开发----基于Restful开发，使用PostMan测试接口功能</li><li>Controller开发----前后端开发协议制作</li><li>页面开发----基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理<ul><li>列表、新增、修改、删除、分页、查询</li></ul></li><li>项目异常处理</li><li>按条件查询----页面功能调整、Controller修正功能、Service修正功能</li></ul></li><li><p>小结<br>①：SSMP案例效果演示<br>②：SSMP案例制作流程解析</p><ul><li>先开发基础CRUD功能，做一层测一层</li><li>调通页面，确认异步提交成功后，制作所有功能</li><li>添加分页功能与查询功能</li></ul></li><li><p>模块创建<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232043032.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232043702.png" alt=""></p></li><li><p>小结<br>①：勾选SpringMVC与MySQL坐标<br>②：修改配置文件为yml格式<br>③：设置端口为80方便访问</p></li><li><p>实体类开发</p><ul><li><p>Lombok，一个Java类库，提供了一组注解，简化POJO实体类开发<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232044511.png" alt=""></p></li><li><p>lombok版本由SpringBoot提供，无需指定版本</p></li><li><p>常用注解：@Data</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Data </span><br><span class="line">public class Book &#123; </span><br><span class="line">private Integer id; </span><br><span class="line">private String type; </span><br><span class="line">private String name; </span><br><span class="line">private String description; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为当前实体类在编译期设置对应的get/set方法，toString方法，hashCode方法，equals方法等</li></ul></li><li><p>小结<br>①：实体类制作<br>②：使用lombok简化开发</p><ul><li>导入lombok无需指定版本，由SpringBoot提供版本</li><li>@Data注解</li></ul></li><li><p>数据层开发</p><ul><li><p>技术实现方案</p><ul><li>MyBatisPlus</li><li>Druid</li></ul></li><li><p>导入MyBatisPlus与Druid对应的starter<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232045275.png" alt=""></p></li><li><p>配置数据源与MyBatisPlus对应的基础配置（id生成策略使用数据库自增策略）<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232045267.png" alt=""></p></li><li><p>继承BaseMapper并指定泛型</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Mapper </span><br><span class="line">public interface BookDao extends BaseMapper&lt;Book&gt; &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>制作测试类测试结果</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest </span><br><span class="line">public class BookDaoTest &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private BookDao bookDao; </span><br><span class="line"></span><br><span class="line">@Test </span><br><span class="line">void testSave() &#123; </span><br><span class="line">Book book = new Book(); </span><br><span class="line">book.setName(&quot;测试数据&quot;); </span><br><span class="line">book.setType(&quot;测试类型&quot;); </span><br><span class="line">book.setDescription(&quot;测试描述数据&quot;); </span><br><span class="line">bookDao.insert(book); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">@Test </span><br><span class="line">void testGetById() &#123; </span><br><span class="line">System.out.println(bookDao.selectById(13)); </span><br><span class="line">&#125; </span><br><span class="line">... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为方便调试可以开启MyBatisPlus的日志<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232046224.png" alt=""></li></ul></li><li><p>小结<br>①：手工导入starter坐标（2个）<br>②：配置数据源与MyBatisPlus对应的配置<br>③：开发Dao接口（继承BaseMapper）<br>④：制作测试类测试Dao功能是否有效<br>⑤：使用配置方式开启日志，设置日志输出方式为标准输出</p><ul><li><p>数据层开发----分页功能</p><ul><li>分页操作需要设定分页对象IPage</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test </span><br><span class="line">void testGetPage()&#123; </span><br><span class="line">IPage page = new Page(1,5); </span><br><span class="line">bookDao.selectPage(page,null); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>IPage对象中封装了分页操作中的所有数据<ul><li>数据</li><li>当前页码值</li><li>每页数据总量</li><li>最大页码值</li><li>数据总量</li></ul></li><li>分页操作是在MyBatisPlus的常规操作基础上增强得到，内部是动态的拼写SQL语句，因此需要增强对应的功能， 使用MyBatisPlus拦截器实现</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Configuration </span><br><span class="line">public class MpConfig &#123; </span><br><span class="line">@Bean </span><br><span class="line">public MybatisPlusInterceptor mpInterceptor() &#123; </span><br><span class="line">//1.定义Mp拦截器 </span><br><span class="line">MybatisPlusInterceptor mpInterceptor = new MybatisPlusInterceptor(); </span><br><span class="line">//2.添加具体的拦截器 </span><br><span class="line">mpInterceptor.addInnerInterceptor(new PaginationInnerInterceptor()); </span><br><span class="line">return mpInterceptor; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：使用IPage封装分页数据<br>②：分页操作依赖MyBatisPlus分页拦截器实现功能<br>③：借助MyBatisPlus日志查阅执行SQL语句</p></li><li><p>数据层开发----条件查询功能</p><ul><li>使用QueryWrapper对象封装查询条件，推荐使用LambdaQueryWrapper对象，所有查询操作封装成方法调用</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test </span><br><span class="line">void testGetByCondition()&#123; </span><br><span class="line">IPage page = new Page(1,10); </span><br><span class="line">LambdaQueryWrapper&lt;Book&gt; lqw = new LambdaQueryWrapper();  </span><br><span class="line">lqw.like(Book::getName,&quot;Spring&quot;); </span><br><span class="line">bookDao.selectPage(page,lqw); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test </span><br><span class="line">void testGetByCondition()&#123; </span><br><span class="line">QueryWrapper&lt;Book&gt; qw = new QueryWrapper&lt;Book&gt;(); </span><br><span class="line">qw.like(&quot;name&quot;,&quot;Spring&quot;); </span><br><span class="line">bookDao.selectList(qw); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>支持动态拼写查询条件</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test </span><br><span class="line">void testGetByCondition()&#123; </span><br><span class="line">String name = &quot;Spring&quot;; </span><br><span class="line"></span><br><span class="line">IPage page = new Page(1,10); </span><br><span class="line">LambdaQueryWrapper&lt;Book&gt; lqw = new LambdaQueryWrapper&lt;Book&gt;(); </span><br><span class="line">lqw.like(Strings.isNotEmpty(name),Book::getName,&quot;Spring&quot;);</span><br><span class="line">bookDao.selectPage(page,lqw); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：使用QueryWrapper对象封装查询条件<br>②：推荐使用LambdaQueryWrapper对象<br>③：所有查询操作封装成方法调用<br>④：查询条件支持动态条件拼装</p></li></ul></li><li><p>业务层开发</p><ul><li><p>Service层接口定义与数据层接口定义具有较大区别，不要混用</p><ul><li>selectByUserNameAndPassword(String username,String password);</li><li>login(String username,String password);</li></ul></li><li><p>接口定义</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public interface BookService &#123; </span><br><span class="line">boolean save(Book book); </span><br><span class="line">boolean delete(Integer id); </span><br><span class="line">boolean update(Book book); </span><br><span class="line"></span><br><span class="line">Book getById(Integer id); </span><br><span class="line">List&lt;Book&gt; getAll(); </span><br><span class="line">IPage&lt;Book&gt; getByPage(int currentPage,int pageSize); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现类定义</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Service </span><br><span class="line">public class BookServiceImpl implements BookService &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private BookDao bookDao; </span><br><span class="line"></span><br><span class="line">public Boolean save(Book book) &#123; </span><br><span class="line">return bookDao.insert(book) &gt; 0; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public Boolean delete(Integer id) &#123; </span><br><span class="line">return bookDao.deleteById(id) &gt; 0; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public Boolean update(Book book) &#123; </span><br><span class="line">return bookDao.updateById(book) &gt; 0; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Service </span><br><span class="line">public class BookServiceImpl implements BookService &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private BookDao bookDao; </span><br><span class="line"></span><br><span class="line">public Book getById(Integer id) &#123; </span><br><span class="line">return bookDao.selectById(id); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public List&lt;Book&gt; getAll() &#123; </span><br><span class="line">return bookDao.selectList(null); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public IPage getByPage(int currentPage, int pageSize) &#123; </span><br><span class="line">IPage page = new Page&lt;Book&gt;(currentPage,pageSize); </span><br><span class="line">return bookDao.selectPage(page,null); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类定义</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest </span><br><span class="line">public class BookServiceTest &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private BookService bookService; </span><br><span class="line"></span><br><span class="line">@Test </span><br><span class="line">void testGetById()&#123; </span><br><span class="line">bookService.getById(9); </span><br><span class="line">&#125; </span><br><span class="line">@Test </span><br><span class="line">void testGetAll()&#123; </span><br><span class="line">bookService.getAll(); </span><br><span class="line">&#125; </span><br><span class="line">@Test </span><br><span class="line">void testGetByPage()&#123; </span><br><span class="line">bookService.getByPage(1,5); </span><br><span class="line">&#125; </span><br><span class="line">… … </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：Service接口名称定义成业务名称，并与Dao接口名称进行区分<br>②：制作测试类测试Service功能是否有效</p><ul><li>业务层开发----快速开发<ul><li>快速开发方案<ul><li>使用MyBatisPlus提供有业务层通用接口（<code>ISerivce&lt;T&gt;</code>）与业务层通用实现类（<br><code>ServiceImpl&lt;M,T&gt;</code>）</li><li>在通用类基础上做功能重载或功能追加</li><li>注意重载时不要覆盖原始操作，避免原始提供的功能丢失<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232046176.png" alt=""></li></ul></li><li>接口定义<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232047387.png" alt=""></li><li>实现类定义</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Service </span><br><span class="line">public class BookServiceImpl2 extends ServiceImpl&lt;BookDao,Book&gt; implements </span><br><span class="line">IBookService &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>实现类追加功能</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Service </span><br><span class="line">public class BookServiceImpl2 extends ServiceImpl&lt;BookDao,Book&gt; implements              IBookService &#123;   </span><br><span class="line">@Autowired </span><br><span class="line">private BookDao bookDao; </span><br><span class="line"></span><br><span class="line">public Boolean insert(Book book) &#123; </span><br><span class="line">return bookDao.insert(book) &gt; 0; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public Boolean modify(Book book) &#123; </span><br><span class="line">return bookDao.updateById(book) &gt; 0; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public Boolean delete(Integer id) &#123; </span><br><span class="line">return bookDao.deleteById(id) &gt; 0; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public Book get(Integer id) &#123; </span><br><span class="line">return bookDao.selectById(id); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类定义（略）</li></ul></li><li>小结<br>①：使用通用接口（<code>ISerivce&lt;T&gt;</code>）快速开发Service<br>②：使用通用实现类（<code>ServiceImpl&lt;M,T&gt;</code>）快速开发ServiceImpl<br>③：可以在通用接口基础上做功能重载或功能追加<br>④：注意重载时不要覆盖原始操作，避免原始提供的功能丢失</li></ul></li><li><p>表现层开发</p><ul><li><p>基于Restful进行表现层接口开发</p></li><li><p>使用Postman测试表现层接口功能</p></li><li><p>功能测试</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController </span><br><span class="line">@RequestMapping(&quot;/books&quot;) </span><br><span class="line">public class BookController &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private IBookService bookService; </span><br><span class="line">@GetMapping </span><br><span class="line">public List&lt;Book&gt; getAll()&#123; </span><br><span class="line">return bookService.list(); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表现层接口开发</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@RestController </span><br><span class="line">@RequestMapping(&quot;/books&quot;) </span><br><span class="line">public class BookController &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private IBookService bookService; </span><br><span class="line"></span><br><span class="line">@PostMapping </span><br><span class="line">public Boolean save(@RequestBody Book book)&#123; </span><br><span class="line">return bookService.insert(book); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">@PutMapping </span><br><span class="line">public Boolean update(@RequestBody Book book)&#123; </span><br><span class="line">return bookService.modify(book); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">@DeleteMapping(&quot;/&#123;id&#125;&quot;) </span><br><span class="line">public Boolean delete(@PathVariable Integer id)&#123; </span><br><span class="line">return bookService.delete(id); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@RestController </span><br><span class="line">@RequestMapping(&quot;/books&quot;) </span><br><span class="line">public class BookController &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private IBookService bookService; </span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/&#123;id&#125;&quot;) </span><br><span class="line">public Book getById(@PathVariable Integer id)&#123; </span><br><span class="line">return bookService.getById(id); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">@GetMapping </span><br><span class="line">public List&lt;Book&gt; getAll()&#123; </span><br><span class="line">return bookService.list(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;) </span><br><span class="line">public List&lt;Book&gt; getAll(@PathVariable Integer currentPage,@PathVariable </span><br><span class="line">Integer pageSize)&#123; </span><br><span class="line">return bookService.getPage(currentPage,pageSize).getRecords(); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：基于Restful制作表现层接口</p><ul><li>新增：POST</li><li>删除：DELETE</li><li>修改：PUT</li><li>查询：GET</li></ul><p>②：接收参数</p><ul><li><p>实体数据：@RequestBody</p></li><li><p>路径变量：@PathVariable</p></li><li><p>表现层消息一致性处理</p><ul><li>设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为<code>前后端数据协议</code></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Data </span><br><span class="line">public class R&#123; </span><br><span class="line">private Boolean flag;</span><br><span class="line">private Object data;  </span><br><span class="line"></span><br><span class="line">public R()&#123; </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">public R(Boolean flag)&#123; </span><br><span class="line">this.flag = flag; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public R(Boolean flag,Object data)&#123; </span><br><span class="line">this.flag = flag; </span><br><span class="line">this.data = data; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表现层接口统一返回值类型结果</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RestController </span><br><span class="line">@RequestMapping(&quot;/books&quot;) </span><br><span class="line">public class BookController &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private IBookService bookService; </span><br><span class="line"></span><br><span class="line">@PostMapping </span><br><span class="line">public R save(@RequestBody Book book)&#123; </span><br><span class="line">Boolean flag = bookService.insert(book); </span><br><span class="line">return new R(flag); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">@PutMapping </span><br><span class="line">public R update(@RequestBody Book book)&#123; </span><br><span class="line">Boolean flag = bookService.modify(book); </span><br><span class="line">return new R(flag); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RestController </span><br><span class="line">@RequestMapping(&quot;/books&quot;) </span><br><span class="line">public class BookController &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private IBookService bookService; </span><br><span class="line"></span><br><span class="line">@DeleteMapping(&quot;/&#123;id&#125;&quot;) </span><br><span class="line">public R delete(@PathVariable Integer id)&#123; </span><br><span class="line">Boolean flag = bookService.delete(id); </span><br><span class="line">return new R(flag); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/&#123;id&#125;&quot;) </span><br><span class="line">public R getById(@PathVariable Integer id)&#123; </span><br><span class="line">Book book = bookService.getById(id); </span><br><span class="line">return new R(true,book); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@RestController </span><br><span class="line">@RequestMapping(&quot;/books&quot;) </span><br><span class="line">public class BookController &#123; </span><br><span class="line">@Autowired </span><br><span class="line">private IBookService bookService; </span><br><span class="line"></span><br><span class="line">@GetMapping </span><br><span class="line">public R getAll()&#123; </span><br><span class="line">List&lt;Book&gt; bookList = bookService.list(); </span><br><span class="line">return new R(true,bookList); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;) </span><br><span class="line">public R getAll(@PathVariable Integer currentPage,@PathVariable Integer </span><br><span class="line">pageSize)&#123; </span><br><span class="line">IPage&lt;Book&gt; page = bookService.getPage(currentPage, pageSize); </span><br><span class="line">return new R(true,page); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：设计统一的返回值结果类型便于前端开发读取数据<br>②：返回值结果类型可以根据需求自行设定，没有固定格式<br>③：返回值结果模型类用于后端与前端进行数据格式统一，也称为前 后端数据协议</p></li></ul></li><li><p>前后端协议联调</p><ul><li><p>前后端分离结构设计中页面归属前端服务器</p></li><li><p>单体工程中页面放置在resources目录下的static目录中（建议执行clean）</p></li><li><p>前端发送异步请求，调用后端接口</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//列表 </span><br><span class="line">getAll() &#123; </span><br><span class="line">axios.get(&quot;/books&quot;).then((res)=&gt;&#123; </span><br><span class="line">console.log(res.data); </span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：单体项目中页面放置在resources/static目录下<br>②：created钩子函数用于初始化页面时发起调用<br>③：页面使用axios发送异步请求获取数据后确认前后端是否联通</p></li><li><p>列表页</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//列表 </span><br><span class="line">getAll() &#123; </span><br><span class="line">axios.get(&quot;/books&quot;).then((res)=&gt;&#123; </span><br><span class="line">this.dataList = res.data.data; </span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：将查询数据返回到页面，利用前端数据双向绑定进行数据展示</p></li><li><p>弹出添加窗口</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//弹出添加窗口 </span><br><span class="line">handleCreate() &#123; </span><br><span class="line">this.dialogFormVisible = true; </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>清除数据</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//重置表单 </span><br><span class="line">resetForm() &#123; </span><br><span class="line">this.formData = &#123;&#125;; </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//弹出添加窗口 </span><br><span class="line">handleCreate() &#123; </span><br><span class="line">this.dialogFormVisible = true; </span><br><span class="line">this.resetForm(); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>添加</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//添加 </span><br><span class="line">handleAdd () &#123; </span><br><span class="line">//发送异步请求 </span><br><span class="line">axios.post(&quot;/books&quot;,this.formData).then((res)=&gt;&#123; </span><br><span class="line">//如果操作成功，关闭弹层，显示数据 </span><br><span class="line">if(res.data.flag)&#123; </span><br><span class="line">this.dialogFormVisible = false; </span><br><span class="line">this.$message.success(&quot;添加成功&quot;); </span><br><span class="line">&#125;else &#123; </span><br><span class="line">this.$message.error(&quot;添加失败&quot;); </span><br><span class="line">&#125; </span><br><span class="line">&#125;).finally(()=&gt;&#123; </span><br><span class="line">this.getAll();</span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>取消添加</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//取消 </span><br><span class="line">cancel()&#123; </span><br><span class="line">this.dialogFormVisible = false; </span><br><span class="line">this.$message.info(&quot;操作取消&quot;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：请求方式使用POST调用后台对应操作<br>②：添加操作结束后动态刷新页面加载数据<br>③：根据操作结果不同，显示对应的提示信息<br>④：弹出添加Div时清除表单数据</p></li><li><p>删除</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> // 删除 </span><br><span class="line"> handleDelete(row) &#123; </span><br><span class="line"> axios.delete(&quot;/books/&quot;+row.id).then((res)=&gt;&#123; </span><br><span class="line"> if(res.data.flag)&#123; </span><br><span class="line"> this.$message.success(&quot;删除成功&quot;); </span><br><span class="line">&#125;else&#123; </span><br><span class="line">this.$message.error(&quot;删除失败&quot;); </span><br><span class="line">&#125; </span><br><span class="line">&#125;).finally(()=&gt;&#123; </span><br><span class="line">this.getAll(); </span><br><span class="line">&#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 删除 </span><br><span class="line">handleDelete(row) &#123; </span><br><span class="line">//1.弹出提示框 </span><br><span class="line">this.$confirm(&quot;此操作永久删除当前数据，是否继续？&quot;,&quot;提示&quot;,&#123; </span><br><span class="line">type:&#x27;info&#x27; </span><br><span class="line">&#125;).then(()=&gt;&#123; </span><br><span class="line">//2.做删除业务 </span><br><span class="line">axios.delete(&quot;/books/&quot;+row.id).then((res)=&gt;&#123; </span><br><span class="line">…… </span><br><span class="line">&#125;).finally(()=&gt;&#123; </span><br><span class="line">this.getAll(); </span><br><span class="line">&#125;); </span><br><span class="line">&#125;).catch(()=&gt;&#123; </span><br><span class="line">//3.取消删除 </span><br><span class="line">this.$message.info(&quot;取消删除操作&quot;); </span><br><span class="line">&#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：请求方式使用Delete调用后台对应操作<br>②：删除操作需要传递当前行数据对应的id值到后台<br>③：删除操作结束后动态刷新页面加载数据<br>④：根据操作结果不同，显示对应的提示信息<br>⑤：删除操作前弹出提示框避免误操作</p></li><li><p>弹出修改窗口</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//弹出编辑窗口 </span><br><span class="line">handleUpdate(row) &#123; </span><br><span class="line">axios.get(&quot;/books/&quot;+row.id).then((res)=&gt;&#123; </span><br><span class="line">if(res.data.flag)&#123; </span><br><span class="line">//展示弹层，加载数据 </span><br><span class="line">this.formData = res.data.data; </span><br><span class="line">this.dialogFormVisible4Edit = true; </span><br><span class="line">&#125;else&#123; </span><br><span class="line">this.$message.error(&quot;数据同步失败，自动刷新&quot;); </span><br><span class="line">&#125; </span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>删除消息维护</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//删除 </span><br><span class="line">handleDelete(row) &#123; </span><br><span class="line">axios.delete(&quot;/books/&quot;+row.id).then((res)=&gt;&#123; </span><br><span class="line">if(res.data.flag)&#123; </span><br><span class="line">this.$message.success(&quot;删除成功&quot;); </span><br><span class="line">&#125;else&#123; </span><br><span class="line">this.$message.error(&quot;数据同步失败，自动刷新&quot;); </span><br><span class="line">&#125; </span><br><span class="line">&#125;).finally(()=&gt;&#123; </span><br><span class="line">this.getAll(); </span><br><span class="line">&#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结<br>①：加载要修改数据通过传递当前行数据对应的id值到后台查询数据<br>②：利用前端数据双向绑定将查询到的数据进行回显</p></li><li><p>修改</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//修改 </span><br><span class="line">handleEdit() &#123; </span><br><span class="line">axios.put(&quot;/books&quot;,this.formData).then((res)=&gt;&#123; </span><br><span class="line">//如果操作成功，关闭弹层并刷新页面 </span><br><span class="line">if(res.data.flag)&#123; </span><br><span class="line">this.dialogFormVisible4Edit = false; </span><br><span class="line">this.$message.success(&quot;修改成功&quot;); </span><br><span class="line">&#125;else &#123; </span><br><span class="line">this.$message.error(&quot;修改失败，请重试&quot;); </span><br><span class="line">&#125; </span><br><span class="line">&#125;).finally(()=&gt;&#123; </span><br><span class="line">this.getAll(); </span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>取消添加和修改</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cancel()&#123; </span><br><span class="line">this.dialogFormVisible = false; </span><br><span class="line">this.dialogFormVisible4Edit = false; </span><br><span class="line">this.$message.info(&quot;操作取消&quot;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>小结<br>①：请求方式使用PUT调用后台对应操作<br>②：修改操作结束后动态刷新页面加载数据（同新增）<br>③：根据操作结果不同，显示对应的提示信息（同新增 ）</li></ul></li><li><p>业务消息一致性处理</p><ul><li>业务操作成功或失败返回数据格式<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232047785.png" alt=""></li><li>后台代码BUG导致数据格式不统一性<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232048023.png" alt=""></li><li>对异常进行统一处理，出现异常后，返回指定信息</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestControllerAdvice </span><br><span class="line">public class ProjectExceptionAdvice &#123; </span><br><span class="line">@ExceptionHandler(Exception.class) </span><br><span class="line">public R doOtherException(Exception ex)&#123; </span><br><span class="line">//记录日志 </span><br><span class="line">//发送消息给运维 </span><br><span class="line">//发送邮件给开发人员,ex对象发送给开发人员 </span><br><span class="line">ex.printStackTrace(); </span><br><span class="line">return new R(false,null,&quot;系统错误，请稍后再试！&quot;); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改表现层返回结果的模型类，封装出现异常后对应的信息<ul><li>flag：false</li><li>Data: null</li><li>消息(msg): 要显示信息</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Data </span><br><span class="line">public class R&#123; </span><br><span class="line">private Boolean flag; </span><br><span class="line">private Object data; </span><br><span class="line">private String msg; </span><br><span class="line"></span><br><span class="line">public R(Boolean flag,Object data,String msg)&#123; </span><br><span class="line">this.flag = flag; </span><br><span class="line">this.data = data; </span><br><span class="line">this.msg = msg; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>页面消息处理，没有传递消息加载默认消息，传递消息后加载指定消息</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//添加 </span><br><span class="line">handleAdd () &#123; </span><br><span class="line">//发送ajax请求 </span><br><span class="line">axios.post(&quot;/books&quot;,this.formData).then((res)=&gt;&#123; </span><br><span class="line">//如果操作成功，关闭弹层，显示数据 </span><br><span class="line">if(res.data.flag)&#123; </span><br><span class="line">this.dialogFormVisible = false; </span><br><span class="line">this.$message.success(&quot;添加成功&quot;); </span><br><span class="line">&#125;else &#123; </span><br><span class="line">this.$message.error(res.data.msg); </span><br><span class="line">&#125; </span><br><span class="line">&#125;).finally(()=&gt;&#123; </span><br><span class="line">this.getAll();</span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>可以在表现层Controller中进行消息统一处理</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping </span><br><span class="line">public R save(@RequestBody Book book) throws IOException &#123; </span><br><span class="line">Boolean flag = bookService.insert(book); </span><br><span class="line">return new R(flag , flag ? &quot;添加成功^_^&quot; : &quot;添加失败-_-!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>目的：国际化</li><li>页面消息处理</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//添加 </span><br><span class="line">handleAdd () &#123; </span><br><span class="line">//发送ajax请求 </span><br><span class="line">axios.post(&quot;/books&quot;,this.formData).then((res)=&gt;&#123; </span><br><span class="line">if(res.data.flag)&#123; </span><br><span class="line">this.dialogFormVisible = false; </span><br><span class="line">this.$message.success(res.data.msg); </span><br><span class="line">&#125;else &#123; </span><br><span class="line">this.$message.error(res.data.msg); </span><br><span class="line">&#125; </span><br><span class="line">&#125;).finally(()=&gt;&#123; </span><br><span class="line">this.getAll(); </span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：使用注解@RestControllerAdvice定义SpringMVC异常处理 器用来处理异常的<br>②：异常处理器必须被扫描加载，否则无法生效<br>③：表现层返回结果的模型类中添加消息属性用来传递消息到页面</p></li><li><p>分页功能</p><ul><li>页面使用el分页组件添加分页功能<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232049231.png" alt=""></li><li>定义分页组件需要使用的数据并将数据绑定到分页组件<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232049922.png" alt=""></li><li>替换查询全部功能为分页功能</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getAll() &#123;</span><br><span class="line">axios.get(&quot;/books/&quot;+this.pagination.currentPage+</span><br><span class="line">&quot;/&quot;+this.pagination.pageSize).then((res) =&gt; &#123;</span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>分页查询</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;) </span><br><span class="line">public R getAll(@PathVariable Integer currentPage,@PathVariable Integer pageSize)&#123; </span><br><span class="line">IPage&lt;Book&gt; pageBook = bookService.getPage(currentPage, pageSize); </span><br><span class="line">return new R(null != pageBook ,pageBook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用路径参数传递分页数据或封装对象传递数据</li><li>加载分页数据</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getAll() &#123; </span><br><span class="line">axios.get(&quot;/books/&quot;+this.pagination.currentPage+&quot;/&quot;</span><br><span class="line">+this.pagination.pageSize).then((res) =&gt; &#123; </span><br><span class="line">this.pagination.total = res.data.data.total; </span><br><span class="line">this.pagination.currentPage = res.data.data.current; </span><br><span class="line">this.pagination.pagesize = res.data.data.size; </span><br><span class="line">this.dataList = res.data.data.records; </span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>分页页码值切换</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//切换页码 </span><br><span class="line">handleCurrentChange(currentPage) &#123; </span><br><span class="line">this.pagination.currentPage = currentPage; </span><br><span class="line">this.getAll(); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：使用el分页组件<br>②：定义分页组件绑定的数据模型<br>③：异步调用获取分页数据<br>④：分页数据页面回显</p></li><li><p>删除功能维护</p><ul><li>对查询结果进行校验，如果当前页码值大于最大页码值，使用最大页码值作为当前页码值重新查询</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;) </span><br><span class="line">public R getPage(@PathVariable int currentPage,@PathVariable int pageSize)&#123; </span><br><span class="line">IPage&lt;Book&gt; page = bookService.getPage(currentPage, pageSize); </span><br><span class="line">//如果当前页码值大于了总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值 </span><br><span class="line">if( currentPage &gt; page.getPages())&#123; </span><br><span class="line">page = bookService.getPage((int)page.getPages(), pageSize); </span><br><span class="line">&#125; </span><br><span class="line">return new R(true, page); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：基于业务需求维护删除功能</p></li><li><p>条件查询功能</p><ul><li>查询条件数据封装<ul><li>单独封装</li><li>与分页操作混合封装<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232049797.png" alt=""></li></ul></li><li>页面数据模型绑定<br><img src="https://cdn.jsdelivr.net/gh/SIRIUSPLUTO/img@main/pic_base/202403232049851.png" alt=""></li><li>组织数据成为get请求发送的数据</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getAll() &#123; </span><br><span class="line">//1.获取查询条件,拼接查询条件 </span><br><span class="line">param = &quot;?name=&quot;+this.pagination.name; </span><br><span class="line">param += &quot;&amp;type=&quot;+this.pagination.type; </span><br><span class="line">param += &quot;&amp;description=&quot;+this.pagination.description; </span><br><span class="line">console.log(&quot;-----------------&quot;+ param); </span><br><span class="line">axios.get(&quot;/books/&quot;+this.pagination.currentPage+&quot;/&quot;</span><br><span class="line">+this.pagination.pageSize+param) .then((res) =&gt; &#123; </span><br><span class="line">this.dataList = res.data.data.records; </span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>条件参数组织可以通过条件判定书写的更简洁</li><li>Controller接收参数</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;) </span><br><span class="line">public R getAll(@PathVariable int currentPage,@PathVariable int pageSize,</span><br><span class="line">Book book) &#123; </span><br><span class="line">System.out.println(&quot;参数=====&gt;&quot;+book); </span><br><span class="line">IPage&lt;Book&gt; pageBook = bookService.getPage(currentPage,pageSize); </span><br><span class="line">return new R(null != pageBook ,pageBook); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务层接口功能开发</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface IBookService extends IService&lt;Book&gt; &#123; </span><br><span class="line">IPage&lt;Book&gt; getPage(Integer currentPage,Integer pageSize,Book queryBook); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service </span><br><span class="line">public class BookServiceImpl2 extends ServiceImpl&lt;BookDao,Book&gt; implements </span><br><span class="line">IBookService &#123; </span><br><span class="line">public IPage getPage(Integer currentPage,Integer pageSize,Book queryBook)&#123; </span><br><span class="line">IPage&lt;Book&gt; page = new Page(currentPage,pageSize); </span><br><span class="line">LambdaQueryWrapper&lt;Book&gt; lqw = new LambdaQueryWrapper(); </span><br><span class="line">lqw.like(Strings.isNotEmpty(queryBook.getName()),</span><br><span class="line">Book::getName,queryBook.getName()); </span><br><span class="line">lqw.like(Strings.isNotEmpty(queryBook.getType()),</span><br><span class="line">Book::getType,queryBook.getType()); </span><br><span class="line">lqw.like(Strings.isNotEmpty(queryBook.getDescription()), </span><br><span class="line">Book::getDescription,queryBook.getDescription()); </span><br><span class="line">return bookDao.selectPage(page,lqw); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Controller调用业务层分页条件查询接口</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;) </span><br><span class="line">public R getAll(@PathVariable int currentPage,@PathVariable int pageSize,</span><br><span class="line">Book book) &#123; </span><br><span class="line">IPage&lt;Book&gt; pageBook = bookService.getPage(currentPage,pageSize,book); </span><br><span class="line">return new R(null != pageBook ,pageBook); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>页面回显数据</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getAll() &#123; </span><br><span class="line">//1.获取查询条件,拼接查询条件 </span><br><span class="line">param = &quot;?name=&quot;+this.pagination.name; </span><br><span class="line">param += &quot;&amp;type=&quot;+this.pagination.type; </span><br><span class="line">param += &quot;&amp;description=&quot;+this.pagination.description; </span><br><span class="line">console.log(&quot;-----------------&quot;+param); </span><br><span class="line">axios.get(&quot;/books/&quot;+this.pagination.currentPage+&quot;/&quot;</span><br><span class="line">+this.pagination.pageSize+param) .then((res) =&gt; &#123; </span><br><span class="line">this.pagination.total = res.data.data.total; </span><br><span class="line">this.pagination.currentPage = res.data.data.current; </span><br><span class="line">this.pagination.pagesize = res.data.data.size; </span><br><span class="line">this.dataList = res.data.data.records; </span><br><span class="line">&#125;); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>小结<br>①：定义查询条件数据模型（当前封装到分页数据模型中）<br>②：异步调用分页功能并通过请求参数传递数据到后台</p></li><li><p>基于SpringBoot的SSMP整合案例</p><ul><li>pom.xml<br><code>配置起步依赖</code></li><li>application.yml<br><code>设置数据源、端口、框架技术相关配置等</code></li><li>dao<br><code>继承BaseMapper、设置@Mapper</code></li><li>dao测试类</li><li>service<br><code>调用数据层接口或MyBatis-Plus提供的接口快速开发</code></li><li>service测试类</li><li>controller<br><code>基于Restful开发，使用Postman测试跑通功能</code></li><li>页面<br><code>放置在resources目录下的static目录中</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 基础篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot总体概括</title>
      <link href="/posts/general.html"/>
      <url>/posts/general.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>参考：<a href="https://www.bilibili.com/video/BV15b4y1a7yG/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&amp;vd_source=beccc1aa43a80247195ca2b7ae6999b7">黑马程序员SpringBoot2全套视频教程，springboot零基础到项目实战（spring boot2完整版）_哔哩哔哩_bilibili</a></p></div><h1>1. 基础篇</h1><ul><li>能够创建SpringBoot工程</li><li>基于SpringBoot实现SSM整合</li></ul><h1>2. 开发实用篇</h1><ul><li>能够基于SpringBoot整合任意第三方技术</li></ul><h1>3. 原理篇</h1><ul><li>掌握SpringBoot内部工作流程</li><li>理解SpringBoot整合第三方技术的原理</li><li>实现自定义开发整合第三方技术的组件</li></ul><h1>4. 运维实用篇</h1><ul><li>能够掌握SpringBoot程序多环境开发</li><li>能够基于Linux系统发布SpringBoot工程</li><li>能够解决线上灵活配置SpringBoot工程的需求</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 总体概括 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
